<template>
  <createView :loading="loading" :body-style="{ height: '100%',padding:0,overflow: 'auto'}">
    <flexbox direction="column" align="stretch" class="create-container">
      <div class="create-flex">
        <sections title="基本信息">
          <div class="input-box" style="width:100%">
            <label class="input-label">归档类型</label>
            <el-select style="width:15%" v-model="from.gdlx" placeholder="请选择">
              <el-option
                v-for="item in gdlxList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">所属客户</label>
            <el-input placeholder="请选择" :readonly="true" clearable v-model="customerName">
              <el-button @click="dialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">接收人</label>
            <el-select v-model="from.contactId" placeholder="请选择" @change="queryPhoneChage">
              <el-option
                v-for="item in contactList"
                :key="item.contactId"
                :label="item.contactName"
                :value="item.contactId"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">联系电话</label>
            <el-input placeholder="请输入联系电话" clearable v-model="from.contactPhone"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">报价单编号</label>
            <el-input placeholder="报价单编号" :readonly="true" v-model="from.bjdDh"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">报价人:</label>
            <el-input :readonly="true" clearable placeholder="请选择报价人" v-model="bjrName">
              <el-button @click="bjrDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">负责部门</label>
            <el-input :readonly="true" clearable placeholder="负责部门" v-model="bmName">
              <el-button @click="fzbmDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">报价日期</label>
            <el-date-picker
              :readonly="true"
              v-model="from.bjrq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">货期</label>
            <el-input placeholder="请输入货期" clearable v-model="from.hq"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">交货日期</label>
            <el-date-picker
              v-model="from.jhrq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">报价有效日期</label>
            <el-date-picker
              v-model="from.bjyxq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">创建人</label>
            <div v-text="creator"></div>
          </div>
          <div class="input-box">
            <label class="input-label">创建日期</label>
            <div v-show="dataStatus" v-text="from.createDate"></div>
            <el-date-picker
              v-show="!dataStatus"
              v-model="from.createDate"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">发票类型</label>
            <el-select v-model="from.fplx" placeholder="请选择">
              <el-option
                v-for="item in fplxList"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">报价阶段</label>
            <el-select v-model="from.bjjd" placeholder="请选择">
              <el-option
                v-for="item in bjjdList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">销售机会:</label>
            <el-input :readonly="true" clearable placeholder="请选择销售机会" v-model="xsjhDh">
              <el-button slot="append" @click="xsjhClick" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">整单折扣(%)</label>
            <el-input placeholder="请输入整单折扣" clearable v-model="from.zdzk"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">备注</label>
            <el-input placeholder="请输入备注" clearable v-model="from.remark"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">共享人</label>
            <el-input :readonly="true" clearable placeholder="请选择共享人" v-model="gxrName">
              <el-button @click="gxrDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">下次提醒时间</label>
            <el-date-picker
              v-model="from.xctx"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box"></div>
          <div class="input-box">
            <label class="input-label">是否补单</label>
            <el-radio @change="dataChange" v-model="from.sfbd" label="是">是</el-radio>
            <el-radio @change="dataChange" v-model="from.sfbd" label="否">否</el-radio>
          </div>
          <div class="input-box">
            <label class="input-label">单位抬头</label>
            <el-select v-model="from.dwtt" placeholder="请选择" @change="dwttChange">
              <el-option
                v-for="item in dwttList"
                :key="item.id"
                :label="item.nameCn"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>

          <!-- <div class="input-box">
            <label class="input-label">报价有效日期</label>
            <el-date-picker
              v-model="from.bjyxq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>-->
          <div class="input-box" style="width:100%">
            <label class="input-label">上传附件</label>
            <a href="javascript:;" class="a-upload">
              <input multiple="multiple" @change="xhUploadFile" type="file" name id />点击这里上传文件(上限5个)
            </a>
            <ul class="uploadStyle">
              <li v-for="(item,index) in fileList" :key="index">
                <span>{{item.name}}</span>
                <i @click="deleteUpload(index)" class="el-icon-close"></i>
              </li>
            </ul>
          </div>
          <el-table
            max-height="340px"
            :data="tableList"
            style="width: 100%"
            :summary-method="getSummaries"
            show-summary
          >
            <el-table-column label="品牌">
              <template slot-scope="scopr">
                <el-input
                  placeholder="请选择"
                  :readonly="true"
                  clearable
                  v-model="scopr.row.brandName"
                >
                  <el-button
                    @click="customerCliuck(scopr.$index)"
                    slot="append"
                    icon="el-icon-plus"
                  ></el-button>
                </el-input>
              </template>
            </el-table-column>
            <el-table-column label="品名">
              <template slot-scope="scopr">
                <el-input
                  placeholder="请选择"
                  :readonly="true"
                  v-model="scopr.row.productName"
                  clearable
                >
                  <el-button @click="comnameIdClick(scopr)" slot="append" icon="el-icon-plus"></el-button>
                </el-input>
              </template>
            </el-table-column>
            <el-table-column label="规格型号">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.productModelnum" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName1 != ''" :label="zdyName1">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType1 == '1'" v-model="scopr.row.ylzd1" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName2 != ''" :label="zdyName2">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType2 ==1" v-model="scopr.row.ylzd2" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName3 != ''" :label="zdyName3">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType3 ==1" v-model="scopr.row.ylzd3" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName4 != ''" :label="zdyName4">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType4 ==1" v-model="scopr.row.ylzd4" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName5 != ''" :label="zdyName5">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType5 ==1" v-model="scopr.row.ylzd5" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName6 != ''" :label="zdyName6">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType6 ==1" v-model="scopr.row.ylzd6" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName7 != ''" :label="zdyName7">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType7 ==1" v-model="scopr.row.ylzd7" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName8 != ''" :label="zdyName8">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType8 ==1" v-model="scopr.row.ylzd8" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName9 != ''" :label="zdyName9">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType9 == 1" v-model="scopr.row.ylzd9" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName10 != ''" :label="zdyName10">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType10 == 1" v-model="scopr.row.ylzd10" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="计量单位">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.measureName" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="未税单价" :render-header="wsdjHeader">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.wsdj" clearable>{{wsdjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="quantity" label="数量">
              <template slot-scope="scopr">
                <el-input @input="quantity(scopr.row)" v-model="scopr.row.quantity" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="税率(%)">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.productSl" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hsdj" label="含税单价" :render-header="hsdjHeader">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.hsdj" clearable>{{hsdjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="sj" label="税金">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.sj" clearable>{{sjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hk" label="货款">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.hk" clearable>{{hkComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hj" label="合计">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.hj" clearable>{{hjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column label="摘要">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.remark" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="操作">
              <template slot-scope="scopr">
                <el-button style="color:#f56c6c" @click="deletClick(scopr.$index)" type="text">删除</el-button>
              </template>
            </el-table-column>
          </el-table>
          <ul class="tableButton">
            <li
              :style="{'width':width}"
              v-for="index of widthList"
              :key="index"
            >{{index == 1?'折扣后合计':index == widthList-2?from.cbzje:''}}</li>
          </ul>
          <el-button icon="el-icon-plus" @click="appendClick" type="text">添加一行</el-button>
        </sections>
        <div class="conditions">
          <div class="conditions-top">
            <div style="width:20%;float:left">
              <span>合同条款主题</span>
              <el-select v-model="typeofcontract" placeholder="请选择" @change="typeofcontactChange">
                <el-option
                  v-for="item in typeofcontactList"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </div>
            <div style="width:70%;float:left;text-align: center;">合同条款内容</div>
            <div style="width:10%;float:left">操作</div>
          </div>
          <div class="conditions-center">
            <div style="float:left;width:100%" v-for="(item,index) in crmBjdHttklList" :key="index">
              <div style="width:20%;float:left">
                <el-input v-model="item.htzt"></el-input>
              </div>
              <div style="width:70%;float:left;text-align: center;">
                <el-input v-model="item.htnr"></el-input>
              </div>
              <div style="width:10%;float:left">
                <el-button @click="deleteHttk(index)" type="text">删除</el-button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="handle-bar">
        <el-button
          style="float:left"
          icon="el-icon-plus"
          @click="typeofcontactClick"
          type="text"
        >添加一行</el-button>
        <el-button type="success" @click="successClick(-1)">保存</el-button>
        <el-button type="primary" @click="successClick(0)">提交</el-button>
        <el-button class="handle-button" @click.native="hidenView">关闭</el-button>
      </div>
    </flexbox>
    <!-- 客户选择 -->
    <el-dialog
      title="客户列表"
      :visible.sync="dialogVisible"
      width="60%"
      :before-close="handleClose"
      :modal-append-to-body="false"
    >
      <div class="dialog-box">
        <label class="input-label">客户名称</label>
        <el-input placeholder="请输入客户名称" clearable v-model="dialogFrom.name"></el-input>
      </div>
      <div class="dialog-box">
        <label class="input-label">客户编码</label>
        <el-input placeholder="请输入客户编码" clearable v-model="dialogFrom.code"></el-input>
      </div>
      <div class="dialog-box">
        <el-button type="primary" @click="search">查询</el-button>
        <el-button @click="reset">重置</el-button>
      </div>
      <div class="table-box">
        <el-table :data="tableData" style="width: 100%" height="500">
          <el-table-column label="客户名称">
            <template slot-scope="scope">
              <span
                @click="queryName(scope.row)"
                style="color: #3E84E9;cursor: pointer"
                v-text="scope.row.name"
              ></span>
            </template>
          </el-table-column>
          <el-table-column prop="code" label="客户编码"></el-table-column>
        </el-table>
      </div>
      <el-pagination
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
        :current-page.sync="dialogFrom.page"
        :page-size="dialogFrom.limit"
        layout="prev, pager, next, jumper"
        :total="total"
      ></el-pagination>
      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogVisible = false">取 消</el-button>
      </span>
    </el-dialog>
    <!-- 品牌选择 -->
    <el-dialog
      title="产品列表"
      :visible.sync="customerVisible"
      width="70%"
      :before-close="handleCloseVisible"
      :modal-append-to-body="false"
    >
      <div class="dialog-box">
        <label class="input-label">品牌</label>
        <el-input :readonly="true" clearable placeholder="请输入客户名称" v-model="brandName">
          <el-button @click="brandIdClick" slot="append" icon="el-icon-plus"></el-button>
        </el-input>
      </div>
      <div class="dialog-box">
        <label class="input-label">品牌</label>
        <el-input placeholder="请输入品牌" clearable v-model="customerFrom.brandName"></el-input>
      </div>
      <div class="dialog-box">
        <label class="input-label">品名</label>
        <el-input placeholder="请输入品名" clearable v-model="customerFrom.productName"></el-input>
      </div>
      <div class="dialog-box">
        <label class="input-label">规格型号</label>
        <el-input placeholder="请输入规格型号" clearable v-model="customerFrom.productModelnum"></el-input>
      </div>
      <div style="width:100%;text-align: center;margin-bottom:20px">
        <el-button type="primary" @click="customerSearch">查询</el-button>
        <el-button @click="customerReset">重置</el-button>
      </div>
      <div class="customer-box">
        <el-table
          :data="customerList"
          style="width: 100%"
          height="400"
          @selection-change="handleSelectionChange"
        >
          <el-table-column type="selection" width="55"></el-table-column>
          <el-table-column label="品牌">
            <template slot-scope="scope">
              <span
                @click="customerClick(scope.row)"
                style="color: #3E84E9;cursor: pointer"
                v-text="scope.row.brandName"
              ></span>
            </template>
          </el-table-column>
          <el-table-column prop="productName" label="品名"></el-table-column>
          <el-table-column prop="productModelnum" label="规格型号"></el-table-column>
          <el-table-column prop="measureName" label="单位"></el-table-column>
        </el-table>
      </div>
      <el-pagination
        style="text-align:right"
        @size-change="handleSizeChangeA"
        @current-change="handleCurrentChangeA"
        :current-page.sync="customerFrom.page"
        :page-size="customerFrom.limit"
        layout="prev, pager, next, jumper"
        :total="total"
      ></el-pagination>
      <span
        slot="footer"
        class="dialog-footer"
        style="width: 100%;
    display: inline-block;
    text-align: center;"
      >
        <el-button type="success" @click="customerAdd">确认</el-button>
        <el-button @click="customerVisible = false">取 消</el-button>
      </span>
    </el-dialog>
    <!-- 客户选择 -->
    <el-dialog
      title="客户选择"
      :visible.sync="dialogCustomer"
      width="30%"
      :before-close="handleCloseCustomer"
      :modal-append-to-body="false"
    >
      <div>
        <div
          @click="customersIdClick(item)"
          style="display: inline-block;margin:10px;cursor: pointer"
          v-for="item in customersList"
          :key="item.customerId"
        >
          <span v-text="item.name"></span>
        </div>
      </div>

      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogCustomer = false">取 消</el-button>
      </span>
    </el-dialog>

    <!-- 选择品牌 -->
    <el-dialog
      :modal-append-to-body="false"
      title="选择品牌"
      :visible.sync="dialogVisibleBrand"
      width="30%"
      :before-close="handleCloseBrand"
    >
      <span>
        <el-input placeholder="输入关键字进行过滤" clearable v-model="filterText"></el-input>
        <div style="width:100%;height:400px;overflow: auto;margin-top:10px">
          <el-tree
            show-checkbox
            class="filter-tree"
            :data="brandData"
            node-key="id"
            :props="defaultProps"
            default-expand-all
            :check-strictly="true"
            :filter-node-method="filterNode"
            ref="tree"
          ></el-tree>
        </div>
      </span>
      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogVisibleBrand = false">关闭</el-button>
        <el-button type="primary" @click="changeTree">确 定</el-button>
      </span>
    </el-dialog>
    <treeDlalog
      @dialogTreeData="dialogTreeData"
      :trddId="treeId"
      @close="dialogStatus = false"
      :dialogStatus="dialogStatus"
    ></treeDlalog>
    <bmDlalog
      @bmDialogTreeData="bmDialogTreeData"
      @close="bmDialogStatus = false"
      :bmDialogStatus="bmDialogStatus"
    ></bmDlalog>
    <gxrDialog
      @gxrDialogTreeData="gxrDialogTreeData"
      @close="gxrDialogStatus = false"
      :gxrDialogStatus="gxrDialogStatus"
    ></gxrDialog>

    <xsjhDialog
      @xsjhQuery="xsjhQuery"
      @colse="dialogVisibleXsjh = false"
      :dialogVisibleXsjh="dialogVisibleXsjh"
    ></xsjhDialog>

    <pmDialog @pmSubit="pmSubit" @colse="dialogComname = false" :dialogComname="dialogComname"></pmDialog>

      <xzpp
      @customerClick="customerClick"
      @customerAdd="customerAdd"
      @colse="customerVisible = false"
      :customerVisible="customerVisible"
    ></xzpp>
  </createView>
</template>

<script>
import createView from "../../components/createView";
import sections from "../../components/sections";
import {
  bjdQueryForAdd,
  bjdQueryDwtt,
  httkQueryTypeOfContact,
  bjdAddOrUpdate,
} from "@/api/crm/xsbjd";
import {
  xbjQueryForAdd,
  xbjQueryCustomer,
  xbjQueryProduct,
  xbjQueryBrandTree,
  xbjAddOrUpdate,
  xbjXjdToBjd,
  xbjQueryComname,
  adminYszdGetYlzdSetByType,
} from "@/api/crm/xbjTable";
import Lockr from "lockr";
import { bjdFileUpload } from "@/api/common";
import treeDlalog from "../../components/treeDlalog";
import bmDlalog from "../../components/bmDlalog";
import gxrDialog from "../../components/gxrDialog";
import xsjhDialog from "../../components/xsjhDialog";
import pmDialog from "../../components/pmDialog";
import xzpp from "../../components/xzpp";

export default {
  name: "",
  components: {
    createView,
    sections,
    treeDlalog,
    bmDlalog,
    gxrDialog,
    xsjhDialog,
    pmDialog,
    xzpp
  },
  watch: {
    "from.zje": {
      handler() {
        this.from.cbzje = (
          Number(this.from.zje) *
          (Number(this.from.zdzk) * 0.01)
        ).toFixed(2);
      },
    },
    "from.zdzk": {
      handler() {
        this.from.cbzje = (
          Number(this.from.zje) *
          (Number(this.from.zdzk) * 0.01)
        ).toFixed(2);
      },
    },
    filterText(val) {
      this.$refs.tree.filter(val);
    },
  },
  computed: {
    wsdjComputed() {
      return (data) => {
        if (!this.wsdjCheckbox) {
          let num = 0;
          if (
            this.tableList[data.$index].hsdj != "" &&
            this.tableList[data.$index].productSl != ""
          ) {
            num = (
              this.tableList[data.$index].hsdj /
              (1 + this.tableList[data.$index].productSl * 0.01)
            ).toFixed(2);
          } else {
            num = 0;
          }
          this.tableList[data.$index].wsdj = num;
        }
      };
    },
    hsdjComputed(val) {
      return (data) => {
        if (!this.hsdjCheckbox) {
          let num = 0;
          if (
            this.tableList[data.$index].wsdj != "" &&
            this.tableList[data.$index].productSl != ""
          ) {
            num = (
              this.tableList[data.$index].wsdj *
              (1 + this.tableList[data.$index].productSl * 0.01)
            ).toFixed(2);
          } else {
            num = 0;
          }
          this.tableList[data.$index].hsdj = num;
        }
      };
    },
    sjComputed() {
      return (data) => {
        if (
          this.tableList[data.$index].wsdj != "" &&
          this.tableList[data.$index].hsdj != ""
        ) {
          this.tableList[data.$index].sj = (
            this.tableList[data.$index].hsdj - this.tableList[data.$index].wsdj
          ).toFixed(2);
        } else {
          this.tableList[data.$index].sj = 0;
        }
      };
    },
    hkComputed() {
      return (data) => {
        if (this.tableList[data.$index].wsdj != "") {
          this.tableList[data.$index].hk = this.tableList[data.$index].wsdj;
        } else {
          this.tableList[data.$index].hk = 0;
        }
      };
    },
    hjComputed() {
      return (data) => {
        if (this.tableList[data.$index].hsdj != "") {
          this.tableList[data.$index].hj = (
            this.tableList[data.$index].hsdj *
            this.tableList[data.$index].quantity
          ).toFixed(2);
        } else {
          this.tableList[data.$index].hj = 0;
        }
      };
    },
  },
  props: ["bjdDetail"],
  data() {
    return {
      dataStatus: true,
      filterText: "",
      brandData: [],
      defaultProps: {
        children: "children",
        label: "name",
      },
      dialogVisibleBrand: false,
      ylzd1: "",
      ylzd2: "",
      ylzd3: "",
      ylzd4: "",
      ylzd5: "",
      ylzd6: "",
      ylzd7: "",
      ylzd8: "",
      ylzd9: "",
      ylzd10: "",
      zdyName1: "",
      zdyName2: "",
      zdyName3: "",
      zdyName4: "",
      zdyName5: "",
      zdyName6: "",
      zdyName7: "",
      zdyName8: "",
      zdyName9: "",
      zdyName10: "",
      ylzdType1: "",
      ylzdType2: "",
      ylzdType3: "",
      ylzdType4: "",
      ylzdType5: "",
      ylzdType6: "",
      ylzdType7: "",
      ylzdType8: "",
      ylzdType9: "",
      ylzdType10: "",
      header: [
        { name: "asdfafsd" },
        { name: "sdf" },
        { name: "dfg" },
        { name: "fg" },
        { name: "fgh" },
        { name: "3e" },
      ],
      customersList: [],
      dialogCustomer: false,
      productList: [],
      options: [],
      props: {
        value: "name",
        label: "name",
        children: "children",
        multiple: true,
      },
      cascaderIds: [],
      tableData: [],
      customerList: [],
      quantityNum: 0,
      tableList: [
        {
          brandName: "",
          brandId: "",
          commnameId: "",
          commnameName: "",
          measureName: "",
          measureUnitid: "",
          quantity: "",
          productSl: "",
          wsdj: "",
          hsdj: "",
          sj: "",
          hk: "",
          hj: "",
          productName: "",
          productId: "",
          productModelnum: "",
          zy: "",
        },
      ],
      ylzdList: [],
      loading: false,
      creator: "",
      ywyName: "",
      dwttList: [],
      gdlxList: [{ name: "实单" }, { name: "重要单" }, { name: "机会单" }],
      from: {
        createDate: "",
        gdlx: "机会单",
        contactId: "",
        brandId: "",
        customerId: "",
        commnameId: "",
        zje: "",
        zkhZje: "",
        bjdDh: "",
        cbzje: "",
        dwtt: "",
        zdzk: "100",
        fplx: 1,
        bjr: "",
        bjrq: "",
        bjyxq: "",
        hq: "",
        contactPhone: "",
        contactName: "",
        jhrq: "",
        pricelx: "",
        remark: "",
        fzbm: "",
        bzr: "",
        bjjd: "",
        gxr: "",
        xctx: "",
        sfbd: "否",
        xsjh: "",
      },
      xsjhDh: "",
      bjjdList: [
        { name: "初次报价" },
        { name: "17%" },
        { name: "二次议价" },
        { name: "执行中" },
        { name: "已结束" },
      ],
      typeofcontract: "",
      typeofcontactList: [],
      contactList: [],
      crmBjdHttklList: [],
      termsetting: {},
      fplxList: [
        {
          name: "增值税发票",
          id: 1,
        },
        {
          name: "普通发票",
          id: 2,
        },
        {
          name: "收据",
          id: 3,
        },
      ],
      brandName: "",
      customerName: "",
      customerId: "",
      dialogVisible: false,
      customerVisible: false,
      dialogFrom: {
        page: 1,
        limit: 15,
        name: "",
        code: "",
      },
      customerFrom: {
        page: 1,
        limit: 15,
        brandName: "",
        productModelnum: "",
        productName: "",
      },
      total: 0,
      selectionList: [],
      customerIndex: "",
      wsdjCheckbox: false,
      hsdjCheckbox: true,
      combinedList: [],
      fileList: [],
      widowData: {},
      fzbmName: "",
      treeId: "",
      bjrName: "",
      dialogStatus: false,
      bmDialogStatus: false,
      bmName: "",
      gxrName: "",
      gxrDialogStatus: false,
      dialogVisibleXsjh: false,
      tableIndex:'',
      dialogComname:false,
      width: "",
      widthList: 0,
    };
  },

  methods: {
    pmSubit(data) {
      this.$set(this.tableList[this.tableIndex], "productName", data.name);
      this.$set(this.tableList[this.tableIndex], "commnameId", data.id);
      this.$set(this.tableList[this.tableIndex], "xjdmxId",'');
    },
    comnameIdClick(scope) {
      this.tableIndex = scope.$index;
      this.dialogComname = true;
    },
    xsjhQuery(dh, id) {
      this.xsjhDh = dh;
      this.from.xsjh = id;
    },
    xsjhClick() {
      this.dialogVisibleXsjh = true;
    },
    dataChange(val) {
      if (val == "是") {
        this.dataStatus = false;
      } else {
        this.dataStatus = true;
      }
    },
    gxrDialogTreeData(val, data) {
      this.gxrName = data;
      this.from.gxr = val;
    },
    gxrDialog() {
      this.gxrDialogStatus = true;
    },
    fzbmDialog() {
      this.bmDialogStatus = true;
    },
    bmDialogTreeData(val, data) {
      this.bmName = data;
      this.from.fzbm = val;
    },
    dialogTreeData(val, data) {
      this.bjrName = data;
      this.from.bjr = val;
    },
    bjrDialog() {
      this.dialogStatus = true;
      this.treeId = this.from.fzbm;
    },
    queryPhoneChage(val) {
      for (var i in this.contactList) {
        if (this.contactList[i].contactId == val) {
          this.from.contactPhone = this.contactList[i].contactPhone;
        }
      }
    },
    queryPhoneChage(val) {
      for (var i in this.contactList) {
        if (this.contactList[i].contactId == val) {
          this.from.contactPhone = this.contactList[i].contactPhone;
        }
      }
    },
    changeTree() {
      this.brandName = "";
      let data = this.$refs.tree.getCheckedNodes();
      let arr = [];
      for (var i in data) {
        this.brandName += "," + data[i].name;
        arr.push(data[i].id);
      }
      this.customerFrom.brandName = arr.join(",");
      this.dialogVisibleBrand = false;
    },
    filterNode(value, data) {
      if (!value) return true;
      return data.name.indexOf(value) !== -1;
    },
    handleCloseBrand() {
      this.dialogVisibleBrand = false;
      this.customerFrom.brandName = "";
      this.brandName = "";
    },
    brandIdClick() {
      this.dialogVisibleBrand = true;
    },
    deleteUpload(index) {
      this.fileList.splice(index, 1);
    },
    /** 图片选择出发 */
    xhUploadFile(event) {
      var files = event.target.files;
      if (files.length > 5) {
        this.msgInfo("最多支持上传5个文件");
        return;
      } else {
        if (files.length > 0) {
          var self = this;
          for (let index = 0; index < files.length; index++) {
            const file = files[index];
            this.sendFileRequest(file);
          }
        }
      }
    },
    sendFileRequest(file, result) {
      var params = { file: file };
      bjdFileUpload(params)
        .then((res) => {
          if (this.fileList.length > 4) {
            return;
          }
          this.fileList.push({
            name: res.name,
            fileId: res.fileId,
          });
        })
        .catch(() => {});
    },
    customersIdClick(item) {
      this.customerName = item.name;
      this.from.customerId = item.customerId;
      this.contactList = item.contactList;
      this.from.contactId = item.contactList[0].contactId;
      this.dialogCustomer = false;
    },
    dwttChange(val) {
      let saleZzsl = 0;
      for (var i in this.dwttList) {
        if (this.dwttList[i].id == val) {
          saleZzsl = this.dwttList[i].saleZzsl;
        }
      }
      for (var i in this.tableList) {
        this.tableList[i].productSl = saleZzsl;
      }
    },
    getSummaries(param) {
      const { columns, data } = param;
      const sums = [];
      columns.forEach((column, index) => {
        if (index === 0) {
          sums[index] = "合计";
          return;
        }
        const values = data.map((item) => Number(item[column.property]));
        if (!values.every((value) => isNaN(value))) {
          sums[index] = values
            .reduce((prev, curr) => {
              const value = Number(curr);
              if (!isNaN(value)) {
                return prev + curr;
              } else {
                return prev;
              }
            }, 0)
            .toFixed(2);
          sums[index];
        } else {
          sums[index] = "";
        }
      });
      this.combinedList = sums;
      this.from.zje = sums[10];
      return sums;
    },
    wsdjHeader(h, { column }) {
      return h("div", [
        h("span", column.label),
        h("el-checkbox", {
          style: "display:inline-flex;margin-left:5px;",
          on: {
            change: ($event, column) => (
              (this.hsdjCheckbox = !$event), (this.wsdjCheckbox = $event)
            ), // 选中事件 $event, column，这里$event=true,column是input的dom当在select里打印的时候
          },
          props: {
            value: this.wsdjCheckbox, //文字框的内容取决于这个value，如果value不存在，会报错
          },
        }),
      ]);
    },
    hsdjHeader(h, { column }) {
      return h("div", [
        h("span", column.label),
        h("el-checkbox", {
          style: "display:inline-flex;margin-left:5px;",
          on: {
            change: ($event, column) => (
              (this.hsdjCheckbox = $event), (this.wsdjCheckbox = !$event)
            ), // 选中事件 $event, column，这里$event=true,column是input的dom当在select里打印的时候
          },
          props: {
            value: this.hsdjCheckbox, //文字框的内容取决于这个value，如果value不存在，会报错
          },
        }),
      ]);
    },
    quantity(row) {
      if (row.brandName == "") {
        this.msgInfo("请选择商品");
      }
    },
    successClick(status) {
      console.log(this.tableList)
      for (var i in this.tableList) {
        if (this.tableList[i].brandId == "") {
          this.msgInfo("请选择品牌!");
          return;
        }
        if (this.tableList[i].productId == "") {
          this.msgInfo("请选择品名!");
          return;
        }
        if (Number(this.tableList[i].quantity) == 0 || this.tableList[i].quantity == '') {
          this.msgInfo("数量大于0!");
          return;
        }
        if (this.tableList[i].productSl == '') {
          this.msgInfo("请输入税率");
          return;
        }
         if (this.tableList[i].hsdj == "" || this.tableList[i].hsdj == null) {
          this.msgInfo("请输入含税单价!");
          return;
        } 
      }
      if (this.from.customerId == "") {
        this.msgInfo("请选择客户!");
        return;
      }
      if (this.from.zdzk == "") {
        this.msgInfo("请输入整单折扣!");
        return;
      }
      this.from.zkhZje = this.from.zje * (this.from.zdzk / 100);
      if (this.wsdjCheckbox) {
        this.from.pricelx = 1;
      } else if (this.hsdjCheckbox) {
        this.from.pricelx = 2;
      }
      for (var i in this.crmBjdHttklList) {
        this.crmBjdHttklList[i].px = Number(i) + 1;
      }
      let arr = [];
      for (var i in this.fileList) {
        arr.push(this.fileList[i].fileId);
      }
      this.from.fileIds = arr.join(",");
      this.from.status = status;
      this.from.typeofcontract = this.typeofcontract;
      this.from.crmBjdmxlList = this.tableList;
      this.from.crmBjdHttklList = this.crmBjdHttklList;

      bjdAddOrUpdate({
        entity: this.from,
      })
        .then((res) => {
          this.loading = true;
          if (res.bjdDh !== this.from.bjdDh) {
            this.loading = false;
            this.message("该单号已占用,已为你生成新单号" + res.bjdDh);
          } else {
            if (status == 0) {
              this.$message({
                message: "修改成功",
                type: "success",
                onClose: () => {
                  this.resetGetList();
                  this.hidenView();
                  this.loading = false;
                },
              });
            } else {
              this.$message({
                message: "修改成功",
                type: "success",
                onClose: () => {
                  this.resetGetList();
                  this.hidenView();
                  this.loading = false;
                },
              });
            }
          }
        })
        .catch((res) => {
          this.loading = false;
        });
    },
    message(val) {
      this.$message({
        message: val,
        type: "success",
        onClose: () => {
          this.resetGetList();
          this.hidenView();
          this.loading = false;
        },
      });
    },
    resetGetList() {
      window.opener.postMessage("child", window.location);
    },
    hidenView() {
      window.top.close();
    },
    search() {
      this.dialogData();
    },
    customerSearch() {
      this.customerData();
    },
    customerReset() {
      this.customerFrom.page = 1;
      this.customerFrom.limit = 15;
      this.cascaderIds = [];
      this.customerFrom.brandName = "";
      this.customerFrom.productModelnum = "";
      this.customerFrom.productModelnum = "";
      this.customerData();
    },
    reset() {
      this.dialogFrom.page = 1;
      this.dialogFrom.limit = 15;
      this.dialogFrom.name = "";
      this.dialogFrom.code = "";
      this.dialogData();
    },
    queryName(data) {
      this.from.commnameId = data.comnameId;
      this.contactList = data.contactList;
      this.from.contactId = data.contactList[0].contactId;
      this.dialogVisible = false;
      this.customerName = data.name;
      this.from.customerId = data.customerId;
      this.from.bjr = data.ywyId;
      this.customerId = data.customerId;
      this.from.contactName = data.contactName;
      this.from.contactPhone = data.contactList[0].contactPhone;
    },
    customerClick(data) {
      this.customerVisible = false;
      this.tableList[this.customerIndex].xjdmxId = ''
      this.tableList[this.customerIndex].brandName = data.brandName;
      this.tableList[this.customerIndex].brandId = data.brandId;
      this.tableList[this.customerIndex].commnameId = data.commnameId;
      this.tableList[this.customerIndex].commnameName = data.comnameName;
      this.tableList[this.customerIndex].measureName = data.measureName;
      this.tableList[this.customerIndex].measureUnitid = data.measureUnitid;
      this.tableList[this.customerIndex].productName = data.productName;
      this.tableList[this.customerIndex].productId = data.productId;
      this.tableList[this.customerIndex].productModelnum = data.productModelnum;
    },
    handleCloseCustomer() {
      this.dialogCustomer = false;
    },
    handleClose() {
      this.dialogVisible = false;
    },
    handleCloseVisible() {
      this.customerVisible = false;
    },
    dialogData() {
      xbjQueryCustomer(this.dialogFrom)
        .then((res) => {
          this.tableData = res.data.list;
          this.total = res.data.totalRow;
        })
        .catch((res) => {});
    },
    dialog() {
      this.dialogVisible = true;
      this.dialogData();
    },
    customerData() {
      xbjQueryProduct(this.customerFrom)
        .then((res) => {
          this.customerList = res.data.list;
        })
        .catch((res) => {});
    },
    customerCliuck(val) {
      this.customerIndex = val;
      this.customerVisible = true;
      // this.customerIndex = val;
      // this.customerVisible = true;
      // this.customerData();
      // xbjQueryBrandTree()
      //   .then((res) => {
      //     this.brandData = res.data;
      //   })
      //   .catch((res) => {});
    },
    typeofcontactChange(val) {
      this.crmBjdHttklList = this.termsetting[val];
    },
    queryData() {
      let self = this;
      this.ywyName = Lockr.get("loginUserInfo").realname;
      adminYszdGetYlzdSetByType({
        type: 1,
      })
        .then((res) => {
          for (var i in this.tableList) {
            for (var k in res.data) {
              this.$set(this.tableList[i], res.data[k].ylzdName, "");
            }
          }
          for (var i in res.data) {
            let num = res.data[i].ylzdName.substring(
              res.data[i].ylzdName.indexOf("d") + 1,
              res.data[i].ylzdName.length
            );
            if (num == "1") {
              this.zdyName1 = res.data[i].zdyName;
              this.ylzdType1 = res.data[i].from;
            } else if (num == "2") {
              this.zdyName2 = res.data[i].zdyName;
              this.ylzdType2 = res.data[i].from;
            } else if (num == "3") {
              this.zdyName3 = res.data[i].zdyName;
              this.ylzdType3 = res.data[i].from;
            } else if (num == "4") {
              this.zdyName4 = res.data[i].zdyName;
              this.ylzdType4 = res.data[i].from;
            } else if (num == "5") {
              this.zdyName5 = res.data[i].zdyName;
              this.ylzdType5 = res.data[i].from;
            } else if (num == "6") {
              this.zdyName6 = res.data[i].zdyName;
              this.ylzdType6 = res.data[i].from;
            } else if (num == "7") {
              this.zdyName7 = res.data[i].zdyName;
              this.ylzdType7 = res.data[i].from;
            } else if (num == "8") {
              this.zdyName8 = res.data[i].zdyName;
              this.ylzdType8 = res.data[i].from;
            } else if (num == "9") {
              this.zdyName9 = res.data[i].zdyName;
              this.ylzdType9 = res.data[i].from;
            } else if (num == "10") {
              this.zdyName10 = res.data[i].zdyName;
              this.ylzdType10 = res.data[i].from;
            }
          }
        })
        .catch((res) => {});
      xbjQueryComname()
        .then((res) => {
          this.productList = res.data;
        })
        .catch((res) => {});
      httkQueryTypeOfContact({ lx: 4 })
        .then((res) => {
          this.typeofcontactList = res.data;
          this.typeofcontract = res.data[0].id;
        })
        .catch((res) => {});
      bjdQueryForAdd()
        .then((res) => {
          this.from.bjdDh = res.data.bjdDh;
          this.termsetting = res.data.termsetting;
          // this.crmBjdHttklList = res.data.termsetting[this.typeofcontract];
          self.termsetting = res.data.termsetting;
          for (var i in self.termsetting) {
            for (var k in self.termsetting[i]) {
              self.termsetting[i][k].htzt = self.termsetting[i][k].tkzt;
              self.termsetting[i][k].htnr = self.termsetting[i][k].tknr;
              self.termsetting[i][k].typeofcontract =
                self.termsetting[i][k].typeofcontact;
              delete self.termsetting[i][k].tkzt;
              delete self.termsetting[i][k].tknr;
              delete self.termsetting[i][k].typeofcontact;
            }
          }
          this.crmBjdHttklList = res.data.termsetting[this.typeofcontract];
        })
        .catch((res) => {});
      bjdQueryDwtt()
        .then((res) => {
          this.dwttList = res.data;
          this.from.dwtt = res.data[0].id;
        })
        .catch((res) => {});
      if (this.widowData.type == "salesQuotation") {
        xbjXjdToBjd({
          xjdmxIds: this.widowData.id,
        })
          .then((res) => {
            this.wsdjCheckbox = false;
            this.hsdjCheckbox = true;
            this.from.gdlx = res.data.gdlx[0];
            if (res.data.customers.length > 1) {
              this.dialogCustomer = true;
              this.customersList = res.data.customers;
            } else {
              this.customerName = res.data.customers[0].name;
              this.from.customerId = res.data.customers[0].customerId;
              this.contactList = res.data.customers[0].contactList;
              this.from.contactId =
                res.data.customers[0].contactList[0].contactId;
              this.from.contactPhone =
                res.data.customers[0].contactList[0].contactPhone;
            }
            for (var i in res.data.djmxList) {
              this.from.xjdId = res.data.djmxList[i].xjdId;
              this.$set(
                res.data.djmxList[i],
                "productSl",
                this.dwttList[0].saleZzsl
              );
            }
            this.tableList = res.data.djmxList;
          })
          .catch((res) => {});
      }
    },
    customerAdd() {
      this.customerVisible = false;
      this.tableList[this.customerIndex].xjdmxId = ''
      for (var i in this.selectionList) {
        this.tableList[Number(i) + this.customerIndex] = Object.assign(
          {},
          this.selectionList[i]
        );
        this.$set(this.tableList, i, this.tableList[i]);
      }
    },
    handleSizeChange(val) {
      this.dialogFrom.limit = val;
      this.dialogData();
    },
    handleCurrentChange(val) {
      this.dialogFrom.page = val;
      this.dialogData();
    },
    handleSizeChangeA(val) {
      this.customerFrom.limit = val;
      this.customerData();
    },
    handleCurrentChangeA(val) {
      this.customerFrom.page = val;
      this.customerData();
    },
    handleSelectionChange(val) {
      this.selectionList = val;
    },
    deletClick(val) {
      this.tableList.splice(val, 1);
    },
    appendClick() {
      this.tableList.push({
        brandName: "",
        brandId: "",
        commnameId: "",
        commnameName: "",
        quantity: "",
        productName: "",
        productId: "",
        productModelnum: "",
        productSl: "",
        wsdj: "",
        hsdj: "",
        sj: "",
        hk: "",
        hj: "",
      });
    },
    deleteHttk(index) {
      this.crmBjdHttklList.splice(index, 1);
    },
    typeofcontactClick() {
      this.crmBjdHttklList.push({
        tkzt: "",
        tknr: "",
        id: "",
      });
    },
  },

  created() {},

  mounted() {
    setTimeout(() => {
      this.width = 100 / $(".el-table__row")[0].cells.length + "%";
      this.widthList = $(".el-table__row")[0].cells.length;
    }, 300);
    this.widowData = this.$route.query;
    this.widowData.id = JSON.parse(this.$route.query.list)
      .map((item) => {
        return item.xjdmxId;
      })
      .join(",");
    this.creator = Lockr.get("loginUserInfo").realname;
    this.bjrName = Lockr.get("loginUserInfo").realname;
    this.from.bjr = Lockr.get("loginUserInfo").userId;
    this.from.createDate = this.getTime();

    this.queryData();
    this.from.bjrq =
      new Date().getFullYear() +
      "-" +
      (new Date().getMonth() + 1) +
      "-" +
      new Date().getDate();
    this.from.bjyxq =
      new Date().getFullYear() +
      "-" +
      (new Date().getMonth() + 1) +
      "-" +
      new Date().getDate();
  },
};
</script>
<style lang='scss' scoped>
@import "../../manage/styles/table.scss";
@import "../../../styles/detail.scss";
.tableButton {
  width: 100%;
  height: 40px;
  li {
    float: left;
    height: 40px;
    line-height: 40px;
    text-align: center;
  }
}
.a-upload {
  padding: 0 10px;
  margin-top: 5px;
  height: 25px;
  line-height: 25px;
  position: relative;
  cursor: pointer;
  color: #888;
  background: #fafafa;
  border: 1px solid #ddd;
  border-radius: 4px;
  overflow: hidden;
  *display: inline;
  *zoom: 1;
  float: left;
}

.a-upload input {
  position: absolute;
  font-size: 100px;
  right: 0;
  top: 0;
  opacity: 0;
  filter: alpha(opacity=0);
  cursor: pointer;
}

.a-upload:hover {
  color: #444;
  background: #eee;
  border-color: #ccc;
  text-decoration: none;
}
.uploadStyle {
  width: 60%;
  float: left;
  line-height: 40px;
  li {
    min-width: 100px;
    float: left;
    margin: 0 5px;
  }
}
.el-icon-close {
  color: red;
  cursor: pointer;
}
</style>