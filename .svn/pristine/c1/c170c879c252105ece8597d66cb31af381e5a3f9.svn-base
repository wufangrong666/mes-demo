<template>
  <createView :loading="loading" :body-style="{ height: '100%',padding:0,overflow: 'auto'}">
    <flexbox direction="column" align="stretch" class="create-container">
      <div class="create-flex">
        <sections title="基本信息">
          <div class="input-box">
            <label class="input-label">客户</label>
            <el-input placeholder="请选择" :readonly="true" clearable v-model="customerName">
              <el-button @click="dialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">联系人</label>
            <el-select v-model="from.contactId" placeholder="请选择" @change="contactPhoneChange">
              <el-option
                v-for="item in contactList"
                :key="item.contactId"
                :label="item.contactName"
                :value="item.contactId"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">发票类型</label>
            <el-select v-model="from.fplx" placeholder="请选择">
              <el-option
                v-for="item in fplxList"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">销售开单单号</label>
            <div v-text="from.xskdDh"></div>
          </div>
          <div class="input-box">
            <label class="input-label">收货地址</label>
            <el-input placeholder="收货地址" v-model="from.shdz"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">联系电话</label>
            <el-input placeholder="联系电话" :readonly="true" v-model="from.contactPhone"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">交货日期</label>
            <el-date-picker
              v-model="from.jhrq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">操作员</label>
            <div v-text="creatorName"></div>
          </div>
          <div class="input-box">
            <label class="input-label">备注</label>
            <el-input placeholder="请输入备注" clearable v-model="from.remark"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">业务员</label>
            <el-input :readonly="true" clearable placeholder="请选择业务员" v-model="ywyName">
              <el-button @click="ywyDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">收款期限</label>
            <el-date-picker
              v-model="from.skqx"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">创建日期</label>
            <div v-text="from.createDate"></div>
          </div>
          <div class="input-box">
            <label class="input-label">单位抬头</label>
            <el-select v-model="from.dwtt" placeholder="请选择" @change="dwttChange">
              <el-option
                v-for="item in dwttList"
                :key="item.id"
                :label="item.nameCn"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">是否补单</label>
            <el-radio v-model="from.sfbd" label="是">是</el-radio>
            <el-radio v-model="from.sfbd" label="否">否</el-radio>
          </div>
          <div class="input-box">
            <label class="input-label">整单折扣</label>
            <el-input
              placeholder="整单折扣"
              @keyup.native="from.zdzk = from.zdzk.replace(/[^\d]/g,'')"
              clearable
              v-model="from.zdzk"
              @input="zkhHj"
            ></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">仓库</label>
            <el-select v-model="from.ck" placeholder="请选择">
              <el-option
                v-for="item in ckList"
                :key="item.ckId"
                :label="item.ckName"
                :value="item.ckId"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">共享人</label>
            <el-input :readonly="true" clearable placeholder="共享人" v-model="gxrName">
              <el-button @click="gxrDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">开单类型</label>
            <el-select v-model="from.kdlx" placeholder="请选择">
              <el-option
                v-for="item in kdlxList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box" style="width:100%">
            <label class="input-label">上传附件</label>
            <a href="javascript:;" class="a-upload">
              <input multiple="multiple" @change="xhUploadFile" type="file" name id />点击这里上传文件(上限5个)
            </a>
            <ul class="uploadStyle">
              <li v-for="(item,index) in fileList" :key="index">
                <span>{{item.name}}</span>
                <i @click="deleteUpload(index,item)" class="el-icon-close"></i>
              </li>
            </ul>
          </div>
          <div class="input-box">
            <label class="input-label">销售订单已结款</label>
            <div style="width:100px;float:left" v-text="from.xsddyjk"></div>
          </div>
          <div class="input-box">
            <label class="input-label" style="width:145px">销售订单剩余欠款金额</label>
            <div style="width:100px;float:left" v-text="from.xsddsyqk"></div>
          </div>
          <div class="input-box"></div>
          <div class="input-box"></div>
          <el-button @click="xzXSDD" style="margin-bottom:10px" type="primary">选择销售订单</el-button>
        </sections>
      </div>
      <div>
        <sections title="发货信息">
          <div class="input-box">
            <label class="input-label">发货方式</label>
            <el-select v-model="from.fhfs" placeholder="请选择">
              <el-option :key="''" :label="'请选择'" :value="''"></el-option>
              <el-option
                v-for="item in fhfsList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">发货金额</label>
            <el-input placeholder clearable v-model="from.fhfy"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">费用类别</label>
            <el-select v-model="from.fylb" placeholder="请选择">
              <option key lable="请选择" value></option>
              <el-option
                v-for="item in fylbList"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box" v-show="from.fylb == '现金'"></div>
          <div class="input-box" v-show="from.fylb == '银行汇款'">
            <label class="input-label">付款账户</label>
            <el-select v-model="from.fkzh" placeholder="请选择">
              <el-option
                v-for="item in fkzhList"
                :key="item.accountId"
                :label="item.accountName"
                :value="item.accountId"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">承运商名称</label>
            <el-select v-model="from.cyfmc" placeholder="请选择">
              <el-option :key="''" :label="'请选择'" :value="''"></el-option>
              <el-option
                v-for="item in cyfmcList"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">承运商电话</label>
            <el-input placeholder="承运商电话" clearable v-model="from.cyfdh"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">发货单号</label>
            <el-input placeholder="发货单号" clearable v-model="from.fhdh"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label"></label>
          </div>
          <div class="input-box">
            <label class="input-label"></label>
          </div>
          <el-table
            max-height="400px"
            :data="tableList"
            style="width: 100%"
            :summary-method="getSummaries"
            show-summary
            :span-method="objectSpanMethod"
          >
            <el-table-column label="认领操作">
              <template slot-scope="scope">
                <el-button v-if="scope.row.xsddmxId != ''" @click="rlkClick(scope)" type="text">认领款</el-button>
              </template>
            </el-table-column>
            <el-table-column label="认领金额">
              <template slot-scope="scopr">
                <span v-text="scopr.row.rlje"></span>
              </template>
            </el-table-column>
            <el-table-column label="订单单号">
              <template slot-scope="scopr">
                <span v-text="scopr.row.xsddDh"></span>
              </template>
            </el-table-column>
            <el-table-column label="品牌">
              <template slot-scope="scopr">
                <el-input
                  placeholder="请选择"
                  :readonly="true"
                  clearable
                  v-model="scopr.row.brandName"
                >
                  <el-button
                    @click="customerCliuck(scopr.$index)"
                    slot="append"
                    icon="el-icon-plus"
                  ></el-button>
                </el-input>
              </template>
            </el-table-column>
            <el-table-column label="品名">
              <template slot-scope="scopr">
                <el-input placeholder="请选择" :readonly="true" v-model="scopr.row.commName" clearable>
                  <el-button @click="comnameIdClick(scopr)" slot="append" icon="el-icon-plus"></el-button>
                </el-input>
              </template>
            </el-table-column>
            <el-table-column label="规格型号">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.productModelnum" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="计量单位">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.measureName" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="未税单价">
              <template slot="header" slot-scope="scope">
                <span>未税单价</span>
                <el-checkbox @change="hsdjCheckbox = false" v-model="wsdjCheckbox"></el-checkbox>
              </template>
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.wsdj = scopr.row.wsdj.replace(/[^\d.]/g,'')"
                  :readonly="hsdjCheckbox"
                  v-model="scopr.row.wsdj"
                  @input="wsdjInput(scopr)"
                ></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="quantity" label="数量">
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.quantity = scopr.row.quantity.replace(/[^\d]/g,'')"
                  @input="quantity(scopr)"
                  v-model="scopr.row.quantity"
                  clearable
                ></el-input>
              </template>
            </el-table-column>
            <el-table-column label="税率(%)">
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.productSl = scopr.row.productSl.replace(/[^\d.]/g,'')"
                  @input="slInput(scopr)"
                  v-model="scopr.row.productSl"
                  clearable
                ></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hsdj" label="含税单价">
              <template slot="header" slot-scope="scope">
                <span>含税单价</span>
                <el-checkbox @change="wsdjCheckbox = false" v-model="hsdjCheckbox"></el-checkbox>
              </template>
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.hsdj = scopr.row.hsdj.replace(/[^\d.]/g,'')"
                  :readonly="wsdjCheckbox"
                  v-model="scopr.row.hsdj"
                  @input="hsdjInput(scopr)"
                ></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="sj" label="税金">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.sj" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hk" label="货款">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.hk" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hj" label="合计">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.hj" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="摘要">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.zy" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="操作">
              <template slot-scope="scopr">
                <el-button style="color:#f56c6c" @click="deletClick(scopr.$index)" type="text">删除</el-button>
              </template>
            </el-table-column>
          </el-table>
          <ul class="tableButton">
            <li
              :style="{'width':width}"
              v-for="index of widthList"
              :key="index"
            >{{index == 1?'折扣后合计':index == widthList-2?from.zkhZje:''}}</li>
          </ul>
          <el-button icon="el-icon-plus" @click="appendClick" type="text">添加一行</el-button>
        </sections>
      </div>
      <div class="handle-bar">
        <el-button type="primary" @click="successClick(-1)">保存</el-button>
        <el-button type="success" @click="successClick(0)">提交</el-button>
        <!-- <el-button type="success" @click="successClick">确认</el-button> -->
        <el-button class="handle-button" @click.native="hidenView">关闭</el-button>
      </div>
    </flexbox>
    <!-- 品牌选择 -->

    <khDialog @hkDialog="hkDialog" @colse="dialogVisible = false" :dialogVisible="dialogVisible"></khDialog>

    <treeDlalog
      @dialogTreeData="dialogTreeData"
      :trddId="treeId"
      @close="dialogStatus = false"
      :dialogStatus="dialogStatus"
    ></treeDlalog>

    <gxrDialog
      @gxrDialogTreeData="gxrDialogTreeData"
      @close="gxrDialogStatus = false"
      :gxrDialogStatus="gxrDialogStatus"
    ></gxrDialog>

    <xzpp
      @customerClick="customerClick"
      @customerAdd="customerAdd"
      @colse="customerVisible = false"
      :customerVisible="customerVisible"
    ></xzpp>

    <pmDialog @pmSubit="pmSubit" @colse="dialogComname = false" :dialogComname="dialogComname"></pmDialog>
  </createView>
</template>

<script>
import createView from "../../components/createView";
import sections from "../../components/sections";
import gxrDialog from "../../components/gxrDialog";

import {
  jxcXskdQueryForAdd,
  jxcXsddQueryck,
  jxcXskdAddOrUpdate,
  jxcXsddQueryForEditById,
  jxcXskdQueryById,
  jxcXsddXsddToxskd,
  jxcXskdFileQueryByXskdId,
  xcXskdSelectExpress,
  jxcXsddGetRlk,
  jxcXskdFileRemoveById,
  bankaccountQueryZkcsh,
  jxcXskdCleanRlkTemp,
} from "@/api/jxc/jxc";
import {
  bjdQueryDwtt,
  httkQueryTypeOfContact,
  bjdQueryForEdit,
} from "@/api/crm/xsbjd";
import { crmCustomerqueryById } from "@/api/crm/ggkhc";
import {
  xbjQueryCustomer,
  xbjQueryProduct,
  xbjQueryBrandTree,
  xbjQueryCustomerContact,
  xbjQueryComname,
} from "@/api/crm/xbjTable";
import { jxcXskdFileUpload } from "@/api/common";
import Lockr from "lockr";
import khDialog from "../../components/khDialog";
import treeDlalog from "../../components/treeDlalog";
import pmDialog from "../../components/pmDialog";
import xzpp from "../../components/xzpp";

export default {
  name: "",
  components: {
    createView,
    sections,
    khDialog,
    treeDlalog,
    gxrDialog,
    pmDialog,
    xzpp,
  },
  watch: {},
  computed: {},
  props: {},
  data() {
    return {
      gxrDialogStatus: false,
      wsdjCheckbox: false,
      hsdjCheckbox: true,
      fkzhList: [],
      treeId: "",
      fileList: [],
      fileIds: [],
      xskdTitle: "",
      cyfmcList: [
        { name: "中国邮政速递物流", id: "1" },
        { name: "德邦物流", id: "2" },
        { name: "韵达快递公司", id: "3" },
        { name: "顺丰快递", id: "4" },
        { name: "宅急送", id: "5" },
      ],
      fpStatusList: [
        { name: "票未开", id: 1 },
        { name: "票已开", id: 2 },
        { name: "票作废", id: 3 },
      ],
      dialogVisible: false,
      customerVisible: false,
      options: [],
      customerList: [],
      props: {
        value: "name",
        label: "name",
        children: "children",
        multiple: true,
      },
      customerFrom: {
        page: 1,
        limit: 15,
        brandName: "",
        productModelnum: "",
        productName: "",
      },
      cascaderIds: [],
      dwttList: [],
      dialogFrom: {
        page: 1,
        limit: 15,
        name: "",
        code: "",
      },
      loading: false,
      customerName: "",
      customerId: "",
      productList: [],
      creatorName: "",
      fylbList: [
        { name: "现金", id: "2" },
        { name: "银行汇款", id: "1" },
      ],
      from: {
        xskdId: "",
        xskdDh: "",
        xsddId: "",
        customerId: "",
        rlkIds: "",
        ck: "",
        fplx: "1",
        hj: "",
        je: "",
        fylb: "现金",
        remark: "",
        bcrlk: "",
        sfbd: "否",
        cyfmc: "",
        cyfdh: "",
        fhfy: "",
        fhdh: "",
        dwtt: "",
        pricelx: "",
        fpStatus: 1,
        contactPhone: "",
        contactId: "",
        shdz: "",
        jhrq: "",
        creator: "",
        ywy: "",
        skqx: "",
        zdzk: 100,
        xsddyjk: "",
        xsddsyqk: "",
        fhfs: "",
        zkhZje: 0,
        createDate: "",
        fkzh: "",
        gxr: "",
        kdlx: "外销类",
      },
      kdlxList: [
        { name: "外销类" },
        { name: "样品" },
        { name: "施工单" },
        { name: "设备销售" },
        { name: "刷卡" },
        { name: "服务销售" },
        { name: "直接销售" },
        { name: "样品销售" },
        { name: "代理商销售" },
        { name: "带包订单" },
        { name: "官方订单" },
      ],
      gxrName: "",
      fhfsList: [
        { name: "快递" },
        { name: "字体" },
        { name: "物流" },
        { name: "航空" },
        { name: "海运" },
        { name: "邮政" },
        { name: "客户自提" },
        { name: "公司送货" },
        { name: "其他" },
        { name: "开车去取" },
      ],
      ywyName: "",
      tableList: [
        {
          xskdmxId: "",
          xsddmxId: "",
          productId: "",
          brandId: "",
          commnameId: "",
          measureUnitid: "",
          quantity: "",
          wsdj: "",
          hsdj: "",
          productSl: "",
          sj: "",
          hk: "",
          hj: "",
          zy: "",
          commName: "",
        },
      ],
      ckList: [],
      tableData: [],
      contactList: [],
      total: 0,
      fplxList: [
        {
          name: "增值税发票",
          id: "1",
        },
        {
          name: "普通发票",
          id: "2",
        },
        {
          name: "收据",
          id: "3",
        },
      ],
      wsdjCheckbox: false,
      hsdjCheckbox: true,
      dialogStatus: false,
      scopeIndex: 0,
      width: "",
      widthList: 0,
      tableIndex: 0,
      dialogComname: false,
    };
  },

  methods: {
    objectSpanMethod({ row, column, rowIndex, columnIndex }) {
      // columnIndex === 0 找到第一列，实现合并随机出现的行数
      if (columnIndex === 0 || columnIndex === 1) {
        const _row = this.spanArr[rowIndex];
        const _col = _row > 0 ? 1 : 0;
        return {
          rowspan: _row,
          colspan: _col,
        };
      }
    },
    getSpanArr(data) {
      this.spanArr = [];
      for (var i = 0; i < data.length; i++) {
        if (i === 0) {
          // 如果是第一条记录（即索引是0的时候），向数组中加入１
          this.spanArr.push(1);
          this.pos = 0;
        } else {
          if (data[i].xsddId === data[i - 1].xsddId) {
            // 如果xjdId相等就累加，并且push 0
            this.spanArr[this.pos] += 1;
            this.spanArr.push(0);
          } else {
            // 不相等push 1
            this.spanArr.push(1);
            this.pos = i;
          }
        }
      }
    },
    comnameIdClick(scope) {
      this.tableIndex = scope.$index;
      this.dialogComname = true;
    },
    pmSubit(data) {
      this.$set(this.tableList[this.tableIndex], "commName", data.name);
      this.$set(this.tableList[this.tableIndex], "commnameId", data.id);
    },
    gxrDialogTreeData(id, name) {
      this.gxrName = name;
      this.from.gxr = id;
    },
    gxrDialog() {
      this.gxrDialogStatus = true;
    },
    zkhHj() {
      let num = 0;
      for (var i in this.tableList) {
        num += Number(this.tableList[i].hj);
      }
      this.$set(
        this.from,
        "zkhZje",
        (Number(num) * (Number(this.from.zdzk) * 0.01)).toFixed(2)
      );
    },
    slInput(scope) {
      if (this.wsdjChecked) {
        this.wsdjInput(scope);
      } else {
        this.hsdjInput(scope);
      }
    },
    quantity(scope) {
      if (this.wsdjChecked) {
        this.wsdjInput(scope);
      } else {
        this.hsdjInput(scope);
      }
    },
    hsdjInput(scope) {
      scope.row.wsdj = (
        Number(scope.row.hsdj) /
        (Number(scope.row.productSl) / 100 + 1)
      ).toFixed(2);
      scope.row.sj = (
        Number(scope.row.wsdj) *
        (Number(scope.row.productSl) / 100) *
        Number(scope.row.quantity)
      ).toFixed(2);
      scope.row.hk = (
        Number(scope.row.wsdj) * Number(scope.row.quantity)
      ).toFixed(2);
      scope.row.hj = (
        Number(scope.row.hsdj) * Number(scope.row.quantity)
      ).toFixed(2);
      this.zkhHj();
    },
    wsdjInput(scope) {
      scope.row.hsdj = (
        Number(scope.row.wsdj) +
        Number(scope.row.wsdj) * (Number(scope.row.productSl) / 100)
      ).toFixed(2);
      scope.row.sj = (
        Number(scope.row.wsdj) *
        (Number(scope.row.productSl) / 100) *
        Number(scope.row.quantity)
      ).toFixed(2);
      scope.row.hk = (
        Number(scope.row.wsdj) * Number(scope.row.quantity)
      ).toFixed(2);
      scope.row.hj = (
        Number(scope.row.hsdj) * Number(scope.row.quantity)
      ).toFixed(2);
      this.zkhHj();
    },
    rlkClick(scope) {
      this.scopeIndex = scope.$index;
      this.windowOpen("/xskdRlk", {
        customerId: scope.row.customerId,
        ddId: scope.row.xsddId,
        kdId: scope.row.xskdId,
        type: "xzxsdd",
      });
    },
    xzXSDD() {
      this.windowOpen("/xskdDetailTable", {
        name: this.customerName,
        type: "xzxsdd",
      });
    },
    dialogTreeData(id, name) {
      this.ywyName = name;
      this.from.ywy = id;
    },
    ywyDialog() {
      this.dialogStatus = true;
    },
    contactPhoneChange(val) {
      for (var i in this.contactList) {
        if (this.contactList[i].contactId == val) {
          this.from.contactPhone = this.contactList[i].contactPhone;
        }
      }
      // if(this.)
    },
    deleteUpload(index, item) {
      this.fileList.splice(index, 1);
      jxcXskdFileRemoveById({
        id: item.fileId,
      })
        .then((res) => {
          this.msgSuccess("删除成功");
        })
        .catch((res) => {});
    },
    /** 图片选择出发 */
    xhUploadFile(event) {
      var files = event.target.files;
      if (files.length > 5) {
        this.msgInfo("最多支持上传5个文件");
        return;
      } else {
        if (files.length > 0) {
          var self = this;
          for (let index = 0; index < files.length; index++) {
            const file = files[index];
            this.sendFileRequest(file);
          }
        }
      }
    },
    sendFileRequest(file, result) {
      var params = { file: file };
      jxcXskdFileUpload(params)
        .then((res) => {
          if (this.fileList.length > 4) {
            return;
          }
          this.fileList.push({
            name: res.name,
            fileId: res.fileId,
          });
          this.fileIds.push({
            fileId: res.fileId,
          });
        })
        .catch(() => {});
    },
    customerCliuck(val) {
      this.customerIndex = val;
      this.customerVisible = true;
    },
    handleCloseVisible() {
      this.customerVisible = false;
    },
    search() {
      this.dialogData();
    },
    reset() {
      this.dialogFrom.page = 1;
      this.dialogFrom.limit = 15;
      this.dialogFrom.name = "";
      this.dialogFrom.code = "";
      this.dialogData();
    },
    handleSizeChange(val) {
      this.dialogFrom.limit = val;
      this.dialogData();
    },
    handleCurrentChange(val) {
      this.dialogFrom.page = val;
      this.dialogData();
    },
    hidenView() {
      if (this.fileIds.length != 0) {
        jxcXskdFileRemoveById({
          id: this.fileIds[i].fileId,
        })
          .then((res) => {
            this.msgSuccess("删除成功");
          })
          .catch((res) => {});
      }
      jxcXskdCleanRlkTemp({
        rlkIds: this.from.rlkIds,
      })
        .then((res) => {})
        .catch((res) => {});
      window.top.close();
    },
    customerData() {
      xbjQueryProduct(this.customerFrom)
        .then((res) => {
          this.customerList = res.data.list;
        })
        .catch((res) => {});
    },
    successClick(status) {
      for (var i in this.tableList) {
        if (this.tableList[i].quantity == "") {
          this.msgInfo("请输入数量");
          return;
        }
        if (this.tableList[i].productSl == "") {
          this.msgInfo("请输入数量");
          return;
        }
        if (this.tableList[i].hsdj == "") {
          this.msgInfo("请输入含税单价");
          return;
        }
      }
      if (this.wsdjCheckbox) {
        this.from.pricelx = 1;
      } else if (this.hsdjCheckbox) {
        this.from.pricelx = 2;
      }
      let arr = [];
      for (var i in this.fileList) {
        arr.push(this.fileList[i].fileId);
      }
      this.from.fileIds = arr.join(",");
      this.from.status = status;
      this.from.jxcXskdmxList = this.tableList;

      jxcXskdAddOrUpdate(this.from)
        .then((res) => {
          if (this.widowData.type == "add") {
            if (res.xskdDh !== this.from.xskdDh) {
              this.$message({
                message: "该单号已占用,已为你生成新单号" + res.xskdDh,
                type: "success",
                onClose: () => {
                  window.opener.postMessage("child", window.location);
                  window.top.close();
                  this.loading = false;
                },
              });
            } else {
              this.loading = true;
              this.$message({
                message: "新增成功",
                type: "success",
                onClose: () => {
                  window.opener.postMessage("child", window.location);
                  window.top.close();
                  this.loading = false;
                },
              });
            }
          } else if (this.widowData.type == "edit") {
            this.loading = true;
            this.$message({
              message: "编辑成功",
              type: "success",
              onClose: () => {
                window.opener.postMessage("child", window.location);
                window.top.close();
                this.loading = false;
              },
            });
          } else {
            this.loading = true;
            this.$message({
              message: "下推成功",
              type: "success",
              onClose: () => {
                window.opener.postMessage("child", window.location);
                window.top.close();
                this.loading = false;
              },
            });
          }
        })
        .catch((res) => {});
    },
    dialogData() {
      xbjQueryCustomer(this.dialogFrom)
        .then((res) => {
          this.tableData = res.data.list;
          this.total = res.data.totalRow;
        })
        .catch((res) => {});
    },
    hkDialog(name, id) {
      this.customerName = name;
      this.from.customerId = id;
      xbjQueryCustomerContact({
        customerId: id,
      })
        .then((res) => {
          this.contactList = res.data;
          this.from.contactId = res.data[0].contactId;
          this.from.contactPhone = res.data[0].contactPhone;
        })
        .catch((res) => {});
    },
    dialog() {
      this.dialogVisible = true;
    },
    customerAdd() {
      this.customerVisible = false;
      for (var i in this.selectionList) {
        this.tableList[Number(i) + this.customerIndex] = Object.assign(
          {},
          this.selectionList[i]
        );
        this.$set(this.tableList, i, this.tableList[i]);
      }
    },
    customerSearch() {
      let arr = [];
      if (this.cascaderIds.length) {
        for (var i in this.cascaderIds) {
          arr.push(this.cascaderIds[i][this.cascaderIds[i].length - 1]);
        }
        this.customerFrom.brandName = arr.join("|");
      }
      this.customerData();
    },
    dwttChange(val) {
      let saleZzsl = 0;
      for (var i in this.dwttList) {
        if (this.dwttList[i].id == val) {
          saleZzsl = this.dwttList[i].saleZzsl;
        }
      }
      for (var i in this.tableList) {
        this.tableList[i].productSl = saleZzsl;
      }
    },
    queryData() {
      let self = this;
      jxcXsddQueryck()
        .then((res) => {
          this.ckList = res.data;
          this.from.ck = res.data[0].ckId;
        })
        .catch((res) => {});
      xcXskdSelectExpress()
        .then((res) => {
          this.cyfmcList = res.data;
        })
        .catch((res) => {});
      xbjQueryComname()
        .then((res) => {
          this.productList = res.data;
        })
        .catch((res) => {});
      bjdQueryDwtt()
        .then((res) => {
          this.dwttList = res.data;
          this.from.dwtt = res.data[0].id;
          this.tableList[0].productSl = res.data[0].saleZzsl;
        })
        .catch((res) => {});
      bankaccountQueryZkcsh()
        .then((res) => {
          for (var i in res.data) {
            if (i == 1) {
              this.fkzhList = res.data[i];
            }
          }
        })
        .catch((res) => {});
      if (this.widowData.type == "add") {
        jxcXskdQueryForAdd()
          .then((res) => {
            this.from.xskdDh = res.data.xskdDh;
            this.from.createDate = res.data.createDate;
          })
          .catch((res) => {});
      } else if (this.widowData.type == "edit") {
        jxcXskdFileQueryByXskdId({
          xskdId: this.widowData.id,
        })
          .then((res) => {
            this.fileList = res.data;
          })
          .catch((res) => {});
        jxcXskdQueryById({
          xskdId: this.widowData.id,
        })
          .then((res) => {
            this.tableList = res.data.xskdmxList;
          this.getSpanArr(res.data.xskdmxList);
            for (var i in this.tableList) {
              if (res.data.bcrlk != null) {
                this.tableList[i].rlje = res.data.bcrlk;
              } else {
                this.tableList[i].rlje = 0;
              }
            }
            this.customerName = res.data.customerName;
            this.ywyName = res.data.ywyName;
            this.from = res.data;
            this.from.xsddId = res.data.xskdmxList[0].xsddId;
            this.gxrName =
              res.data.gxrName == ""
                ? res.data.gxrName
                : res.data.gxrName
                    .map((item) => {
                      return item.realname;
                    })
                    .join(",");

            this.from.fkzh = Number(res.data.fkzh);
            this.from.cyfmc = Number(res.data.cyfmc);
            xbjQueryCustomerContact({
              customerId: res.data.customerId,
            })
              .then((res) => {
                this.contactList = res.data;
                this.from.contactId = res.data[0].contactId;
              })
              .catch((res) => {});
          })
          .catch((res) => {});
      } else if (this.widowData.type == "xskdXtui") {
        jxcXskdQueryForAdd()
          .then((item) => {
            this.from.xskdDh = item.data.xskdDh;
            this.from.createDate = item.data.createDate;
          })
          .catch((res) => {});
        this.xtQuery(this.widowData.id);
      }
    },
    xtQuery(id) {
      jxcXsddXsddToxskd({
        xsddIds: id,
      })
        .then((res) => {
          this.tableList = res.data.djmxList;
          this.getSpanArr(res.data.djmxList);
          this.customerName = res.data.baseMsg[0].customerName;
          this.from.customerId = res.data.baseMsg[0].customerId;
          this.from.contactPhone = res.data.baseMsg[0].contactPhone;
          this.from.dwtt = res.data.baseMsg[0].dwtt;
          this.from.xsRemark = res.data.baseMsg[0].xsRemark;
          this.from.ywy = res.data.baseMsg[0].ywy;
          this.ywyName = res.data.baseMsg[0].ywyName;
          this.from.xsddyjk = res.data.baseMsg[0].ysk;
          this.from.xsddsyqk = res.data.baseMsg[0].syqk;
          this.from.zkhZje = res.data.baseMsg[0].zkhZje;
          this.$set(this.from, "xsddId", this.widowData.id);

          xbjQueryCustomerContact({
            customerId: res.data.baseMsg[0].customerId,
          })
            .then((res) => {
              this.contactList = res.data;
              this.from.contactId = res.data[0].contactId;
            })
            .catch((res) => {});
        })
        .catch((res) => {});
    },
    appendClick() {
      this.tableList.push({
        xskdmxId: "",
        xsddmxId: "",
        productId: "",
        brandId: "",
        brandName: "",
        commnameId: "",
        commName: "",
        measureUnitid: "",
        quantity: "",
        wsdj: "",
        hsdj: "",
        productSl: "",
        sj: "",
        hk: "",
        hj: "",
        zy: "",
      });
    },
    customerClick(data) {
      this.customerVisible = false;
      this.tableList[this.customerIndex].brandName = data.brandName;
      this.tableList[this.customerIndex].brandId = data.brandId;
      this.tableList[this.customerIndex].commnameId = data.commnameId;
      this.tableList[this.customerIndex].commName = data.productName;
      this.tableList[this.customerIndex].measureName = data.measureName;
      this.tableList[this.customerIndex].measureUnitid = data.measureUnitid;
      this.tableList[this.customerIndex].productId = data.productId;
      this.tableList[this.customerIndex].productModelnum = data.productModelnum;
    },
    getSummaries(param) {
      const { columns, data } = param;
      const sums = [];
      columns.forEach((column, index) => {
        if (index === 0) {
          sums[index] = "合计";
          return;
        }
        const values = data.map((item) => Number(item[column.property]));
        if (!values.every((value) => isNaN(value))) {
          sums[index] = values
            .reduce((prev, curr) => {
              const value = Number(curr);
              if (!isNaN(value)) {
                return prev + curr;
              } else {
                return prev;
              }
            }, 0)
            .toFixed(2);
          sums[index];
        } else {
          sums[index] = "";
        }
      });
      this.from.hj = sums[13];
      this.from.je = sums[10];
      this.from.zje = sums[13];
      return sums;
    },
    customerReset() {
      this.customerFrom.page = 1;
      this.customerFrom.limit = 15;
      this.cascaderIds = [];
      this.customerFrom.brandName = "";
      this.customerFrom.productModelnum = "";
      this.customerFrom.productModelnum = "";
      this.customerData();
    },
    handleSizeChange(val) {
      this.dialogFrom.limit = val;
      this.dialogData();
    },
    handleCurrentChange(val) {
      this.dialogFrom.page = val;
      this.dialogData();
    },
    handleSizeChangeA(val) {
      this.customerFrom.limit = val;
      this.customerData();
    },
    handleCurrentChangeA(val) {
      this.customerFrom.page = val;
      this.customerData();
    },
    handleSelectionChange(val) {
      this.selectionList = val;
    },
    deletClick(val) {
      if (this.tableList.length == 1) {
        this.msgInfo("无法删除最后一条");
      } else {
        this.tableList.splice(val, 1);
      }
    },
    receiveMessage(event) {
      if (event.data.type == "table") {
        this.from.xsddId = event.data.list
          .map((item) => {
            return item.xsddId;
          })
          .join(",");
        this.xtQuery(
          event.data.list
            .map((item) => {
              return item.xsddId;
            })
            .join(",")
        );
      } else {
        this.tableList[this.scopeIndex].rlje = event.data.list;
        this.$set(this.from, "bcrlk", event.data.list);
        this.from.rlkIds = event.data.zdyid;
      }
    },
  },

  created() {},

  mounted() {
    setTimeout(() => {
      this.width = 100 / $(".el-table__row")[0].cells.length + "%";
      this.widthList = $(".el-table__row")[0].cells.length;
    }, 300);
    this.widowData = this.$route.query;
    this.widowData.id = this.decode(this.$route.query.id);
    this.from.xsddId = this.widowData.id;
    this.creatorName = Lockr.get("loginUserInfo").realname;
    this.from.creator = Lockr.get("loginUserInfo").userId;
    window.addEventListener("message", this.receiveMessage, false);
    this.queryData();
  },
};
</script>
<style lang='scss'>
.create-container .el-input__inner {
  padding-right: 0;
}
.content .el-input__inner {
  height: 25px;
}
.content .el-input__icon {
  line-height: 25px;
}
</style>
<style lang='scss' scoped>
@import "../../manage/styles/table.scss";
@import "../../../styles/detail.scss";
.tableButton {
  width: 100%;
  height: 40px;
  li {
    float: left;
    height: 40px;
    line-height: 40px;
    text-align: center;
  }
}
.a-upload {
  padding: 0 10px;
  margin-top: 5px;
  height: 20px;
  line-height: 20px;
  position: relative;
  cursor: pointer;
  color: #888;
  background: #fafafa;
  border: 1px solid #ddd;
  border-radius: 4px;
  overflow: hidden;
  *display: inline;
  *zoom: 1;
  float: left;
}

.a-upload input {
  position: absolute;
  font-size: 100px;
  right: 0;
  top: 0;
  opacity: 0;
  filter: alpha(opacity=0);
  cursor: pointer;
}

.a-upload:hover {
  color: #444;
  background: #eee;
  border-color: #ccc;
  text-decoration: none;
}
.uploadStyle {
  width: 60%;
  float: left;
  line-height: 40px;
  li {
    min-width: 100px;
    float: left;
    margin: 0 5px;
  }
}
.el-icon-close {
  color: red;
  cursor: pointer;
}
</style>