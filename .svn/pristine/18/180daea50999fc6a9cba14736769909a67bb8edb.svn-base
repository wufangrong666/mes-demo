<template>
  <createView :loading="loading" :body-style="{ height: '100%',padding:0,overflow: 'auto'}">
    <flexbox direction="column" align="stretch" class="create-container">
      <div class="create-flex">
        <sections title="基本信息">
          <div class="input-box" style="width:100%">
            <label class="input-label">归档类型</label>
            <el-select style="width:15%" v-model="from.gdlx" placeholder="请选择">
              <el-option
                v-for="item in gdlxList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">
              <span style="color:red">*</span>所属客户
            </label>
            <el-input placeholder="请选择" :readonly="true" clearable v-model="customerName">
              <el-button @click="dialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">接收人</label>
            <el-input placeholder="请选择" :readonly="true" clearable v-model="from.contactName">
              <el-button @click="contactDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">联系电话</label>
            <el-input placeholder="请输入联系电话" clearable v-model="from.contactPhone"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">报价单编号</label>
            <el-input placeholder="报价单编号" :readonly="true" v-model="from.bjdDh"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">报价人:</label>
            <el-input :readonly="true" clearable placeholder="请选择报价人" v-model="bjrName">
              <el-button @click="bjrDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">负责部门</label>
            <el-input :readonly="true" clearable placeholder="请选择报价人" v-model="bmName">
              <el-button @click="fzbmDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">报价日期</label>
            <el-date-picker
              :readonly="true"
              v-model="from.bjrq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">货期</label>
            <el-input placeholder="请输入货期" clearable v-model="from.hq"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">交货日期</label>
            <el-date-picker
              v-model="from.jhrq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">报价有效日期</label>
            <el-date-picker
              v-model="from.bjyxq"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">创建人</label>
            <div v-text="creator"></div>
          </div>
          <div class="input-box">
            <label class="input-label">创建日期</label>
            <div v-text="from.createDate" v-if="from.sfbd == '否'"></div>
            <el-date-picker
              v-else
              v-model="from.createDate"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box">
            <label class="input-label">发票类型</label>
            <el-select v-model="from.fplx" placeholder="请选择">
              <el-option
                v-for="item in fplxList"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">报价阶段</label>
            <el-select v-model="from.bjjd" placeholder="请选择">
              <el-option
                v-for="item in bjjdList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              ></el-option>
            </el-select>
          </div>
          <div class="input-box">
            <label class="input-label">销售机会:</label>
            <el-input :readonly="true" clearable placeholder="请选择销售机会" v-model="xsjhDh">
              <el-button slot="append" @click="xsjhClick" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">
              <span style="color:red">*</span>整单折扣(%)
            </label>
            <el-input
              @keyup.native="from.zdzk = from.zdzk.replace(/[^\d]/g,'')"
              placeholder="请输入整单折扣"
              @input="zdzkInput"
              clearable
              v-model="from.zdzk"
            ></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">备注</label>
            <el-input placeholder="请输入备注" clearable v-model="from.remark"></el-input>
          </div>
          <div class="input-box">
            <label class="input-label">共享人</label>
            <el-input :readonly="true" clearable placeholder="请选择共享人" v-model="gxrName">
              <el-button @click="gxrDialog" slot="append" icon="el-icon-plus"></el-button>
            </el-input>
          </div>
          <div class="input-box">
            <label class="input-label">下次提醒时间</label>
            <el-date-picker
              v-model="from.xctx"
              value-format="yyyy-MM-dd"
              type="date"
              placeholder="选择日期"
            ></el-date-picker>
          </div>
          <div class="input-box"></div>
          <div class="input-box">
            <label class="input-label">是否补单</label>
            <el-radio v-model="from.sfbd" label="是">是</el-radio>
            <el-radio v-model="from.sfbd" label="否">否</el-radio>
          </div>
          <div class="input-box">
            <label class="input-label">单位抬头</label>
            <el-select v-model="from.dwtt" placeholder="请选择" @change="dwttChange">
              <el-option
                v-for="item in dwttList"
                :key="item.id"
                :label="item.nameCn"
                :value="item.id"
              ></el-option>
            </el-select>
          </div>

          <div class="input-box" style="width:100%">
            <label class="input-label">上传附件</label>
            <a href="javascript:;" class="a-upload">
              <input multiple="multiple" @change="xhUploadFile" type="file" name id />点击这里上传文件(上限5个)
            </a>
            <ul class="uploadStyle">
              <li v-for="(item,index) in fileList" :key="index">
                <span>{{item.name}}</span>
                <i @click="deleteUpload(index)" class="el-icon-close"></i>
              </li>
            </ul>
          </div>
          <el-table max-height="340px" :data="tableList" style="width: 100%" show-summary>
            <el-table-column label="品牌">
              <template slot="header" slot-scope="scope">
                <span>品牌</span>
                <span style="color:red">*</span>
              </template>
              <template slot-scope="scopr">
                <el-input
                  placeholder="请选择"
                  :readonly="true"
                  clearable
                  v-model="scopr.row.brandName"
                >
                  <el-button
                    @click="customerCliuck(scopr.$index)"
                    slot="append"
                    icon="el-icon-plus"
                  ></el-button>
                </el-input>
              </template>
            </el-table-column>
            <el-table-column label="品名">
              <template slot-scope="scopr">
                <el-input placeholder="请选择" :readonly="true" v-model="scopr.row.comname" clearable>
                  <el-button @click="comnameIdClick(scopr)" slot="append" icon="el-icon-plus"></el-button>
                </el-input>
              </template>
            </el-table-column>
            <el-table-column label="规格型号">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.productModelnum" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName1 != ''" :label="zdyName1">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType1 == '1'" v-model="scopr.row.ylzd1" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName2 != ''" :label="zdyName2">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType2 ==1" v-model="scopr.row.ylzd2" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName3 != ''" :label="zdyName3">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType3 ==1" v-model="scopr.row.ylzd3" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName4 != ''" :label="zdyName4">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType4 ==1" v-model="scopr.row.ylzd4" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName5 != ''" :label="zdyName5">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType5 ==1" v-model="scopr.row.ylzd5" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName6 != ''" :label="zdyName6">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType6 ==1" v-model="scopr.row.ylzd6" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName7 != ''" :label="zdyName7">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType7 ==1" v-model="scopr.row.ylzd7" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName8 != ''" :label="zdyName8">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType8 ==1" v-model="scopr.row.ylzd8" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName9 != ''" :label="zdyName9">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType9 == 1" v-model="scopr.row.ylzd9" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column v-if="zdyName10 != ''" :label="zdyName10">
              <template slot-scope="scopr">
                <el-input :readonly="ylzdType10 == 1" v-model="scopr.row.ylzd10" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="计量单位">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.measureName" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="未税单价" :render-header="wsdjHeader">
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.wsdj = scopr.row.wsdj.replace(/[^\d.]/g,'')"
                  v-model="scopr.row.wsdj"
                  clearable
                >{{wsdjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column label="数量">
              <template slot="header" slot-scope="scope">
                <span>数量</span>
                <span style="color:red">*</span>
              </template>
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.quantity = scopr.row.quantity.replace(/[^\d]/g,'')"
                  v-model="scopr.row.quantity"
                  clearable
                  @input="quantityInput"
                ></el-input>
              </template>
            </el-table-column>
            <el-table-column label="税率(%)">
              <template slot-scope="scopr">
                <el-input
                  @keyup.native="scopr.row.productSl = scopr.row.productSl.replace(/[^\d.]/g,'')"
                  v-model="scopr.row.productSl"
                  clearable
                ></el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hsdj" label="含税单价" :render-header="hsdjHeader">
              <template slot-scope="scopr">
                <el-input
                  @input="hsdjInput"
                  @keyup.native="scopr.row.hsdj = scopr.row.hsdj.replace(/[^\d.]/g,'')"
                  v-model="scopr.row.hsdj"
                  clearable
                >{{hsdjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="sj" label="税金">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.sj" clearable>{{sjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hk" label="货款">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.hk" clearable>{{hkComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column prop="hj" label="合计">
              <template slot-scope="scopr">
                <el-input :readonly="true" v-model="scopr.row.hj" clearable>{{hjComputed(scopr)}}</el-input>
              </template>
            </el-table-column>
            <el-table-column label="摘要">
              <template slot-scope="scopr">
                <el-input v-model="scopr.row.zy" clearable></el-input>
              </template>
            </el-table-column>
            <el-table-column label="操作">
              <template slot-scope="scopr">
                <el-button style="color:#f56c6c" @click="deletClick(scopr.$index)" type="text">删除</el-button>
              </template>
            </el-table-column>
          </el-table>
          <ul class="tableButton">
            <li
              :style="{'width':width}"
              v-for="index of widthList"
              :key="index"
            >{{index == 1?'折扣后合计':index == widthList-2?from.zkhZje:''}}</li>
          </ul>
          <el-button icon="el-icon-plus" @click="appendClick" type="text">添加一行</el-button>
        </sections>
        <div class="conditions">
          <div class="conditions-top">
            <div style="width:20%;float:left">
              <span>合同条款主题</span>
              <el-select v-model="typeofcontract" placeholder="请选择" @change="typeofcontactChange">
                <el-option
                  v-for="item in typeofcontactList"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                ></el-option>
              </el-select>
            </div>
            <div style="width:70%;float:left;text-align: center;">合同条款内容</div>
            <div style="width:10%;float:left">操作</div>
          </div>
          <div class="conditions-center">
            <div style="float:left;width:100%" v-for="(item,index) in crmBjdHttklList" :key="index">
              <div style="width:20%;float:left">
                <el-input v-model="item.htzt"></el-input>
              </div>
              <div style="width:70%;float:left;text-align: center;">
                <el-input v-model="item.htnr"></el-input>
              </div>
              <div style="width:10%;float:left">
                <el-button @click="deleteHttk(index)" type="text">删除</el-button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="handle-bar" style="margin-top:20px">
        <el-button
          style="float:left"
          icon="el-icon-plus"
          @click="typeofcontactClick"
          type="text"
        >添加一行</el-button>
        <el-button type="primary" @click="successClick(-1)">保存</el-button>
        <el-button type="success" @click="successClick(0)">提交</el-button>
        <!-- <el-button  type="success" @click="audit(1)">审核通过</el-button> -->
        <!-- <el-button type="info" @click="audit(2)">审核不通过</el-button> -->
        <el-button class="handle-button" @click.native="hidenView">关闭</el-button>
      </div>
    </flexbox>

    <!-- 客户选择 -->
    <el-dialog
      title="客户选择"
      :visible.sync="dialogCustomer"
      width="30%"
      :before-close="handleCloseCustomer"
      :modal-append-to-body="false"
    >
      <div>
        <div
          @click="customersIdClick(item)"
          style="display: inline-block;margin:10px;cursor: pointer"
          v-for="item in customersList"
          :key="item.customerId"
        >
          <span v-text="item.name"></span>
        </div>
      </div>

      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogCustomer = false">取 消</el-button>
      </span>
    </el-dialog>

    <el-dialog
      :modal-append-to-body="false"
      title="审核不通过原因"
      :visible.sync="auditDialog"
      width="30%"
      :before-close="handleClose"
    >
      <span>
        <el-input v-model="message" placeholder="请输入内容"></el-input>
      </span>
      <span slot="footer" class="dialog-footer">
        <el-button @click="auditDialog = false">取 消</el-button>
        <el-button type="primary" @click="auditDialogSubmit">确 定</el-button>
      </span>
    </el-dialog>

    <treeDlalog
      @dialogTreeData="dialogTreeData"
      :trddId="treeId"
      @close="dialogStatus = false"
      :dialogStatus="dialogStatus"
    ></treeDlalog>
    <bmDlalog
      @bmDialogTreeData="bmDialogTreeData"
      @close="bmDialogStatus = false"
      :bmDialogStatus="bmDialogStatus"
    ></bmDlalog>
    <gxrDialog
      @gxrDialogTreeData="gxrDialogTreeData"
      @close="gxrDialogStatus = false"
      :gxrDialogStatus="gxrDialogStatus"
    ></gxrDialog>

    <xzpp
      @customerClick="customerClick"
      @customerAdd="customerAdd"
      @colse="customerVisible = false"
      :customerVisible="customerVisible"
    ></xzpp>
    <khDialog @hkDialog="hkDialog" @colse="dialogVisible = false" :dialogVisible="dialogVisible"></khDialog>
    <lxrDialog
      @lxrDialog="lxrDialog"
      @colse="lxrdialogVisible = false"
      :customerId="from.customerId"
      :lxrdialogVisible="lxrdialogVisible"
    ></lxrDialog>
    <xsjhDialog
      @xsjhQuery="xsjhQuery"
      @colse="dialogVisibleXsjh = false"
      :dialogVisibleXsjh="dialogVisibleXsjh"
    ></xsjhDialog>

    <pmDialog @pmSubit="pmSubit" @colse="dialogComname = false" :dialogComname="dialogComname"></pmDialog>
  </createView>
</template>

<script>
import createView from "../../components/createView";
import sections from "../../components/sections";
import {
  bjdQueryForAdd,
  bjdQueryDwtt,
  httkQueryTypeOfContact,
  bjdAddOrUpdate,
  bjdQueryForEdit,
  bjdCheckStatus,
  crmJjfaSelectXsjh,
  xsjhXsjhToBjd,
} from "@/api/crm/xsbjd";
import {
  xbjQueryForAdd,
  xbjQueryCustomer,
  xbjQueryProduct,
  xbjQueryBrandTree,
  xbjAddOrUpdate,
  xbjXjdToBjd,
  xbjQueryComname,
  xbjQueryCustomerContact,
  bjdFileQueryByBjdId,
  adminYszdGetYlzdSetByType,
} from "@/api/crm/xbjTable";
import { bjdFileUpload } from "@/api/common";
import treeDlalog from "../../components/treeDlalog";
import bmDlalog from "../../components/bmDlalog";
import gxrDialog from "../../components/gxrDialog";
import pmDialog from "../../components/pmDialog";
import Lockr from "lockr";
import xzpp from "../../components/xzpp";
import xsjhDialog from "../../components/xsjhDialog";
import khDialog from "../../components/khDialog";
import lxrDialog from "../../components/lxrDialog";
export default {
  name: "",
  components: {
    createView,
    sections,
    treeDlalog,
    bmDlalog,
    gxrDialog,
    xzpp,
    xsjhDialog,
    pmDialog,
    khDialog,
    lxrDialog,
  },
  watch: {
    filterText(val) {
      this.$refs.tree.filter(val);
    },
  },
  computed: {
    wsdjComputed() {
      return (data) => {
        if (!this.wsdjCheckbox) {
          let num = 0;
          if (
            this.tableList[data.$index].hsdj != "" &&
            this.tableList[data.$index].productSl != ""
          ) {
            num = (
              this.tableList[data.$index].hsdj /
              (1 + this.tableList[data.$index].productSl * 0.01)
            ).toFixed(2);
          } else {
            num = 0;
          }
          this.tableList[data.$index].wsdj = num;
        }
      };
    },
    hsdjComputed(val) {
      return (data) => {
        if (!this.hsdjCheckbox) {
          let num = 0;
          if (
            this.tableList[data.$index].wsdj != "" &&
            this.tableList[data.$index].productSl != ""
          ) {
            num = (
              this.tableList[data.$index].wsdj *
              (1 + this.tableList[data.$index].productSl * 0.01)
            ).toFixed(2);
          } else {
            num = 0;
          }
          this.tableList[data.$index].hsdj = num;
        }
      };
    },
    sjComputed() {
      return (data) => {
        if (
          this.tableList[data.$index].wsdj != "" &&
          this.tableList[data.$index].hsdj != ""
        ) {
          this.tableList[data.$index].sj = (
            (this.tableList[data.$index].hsdj -
              this.tableList[data.$index].wsdj) *
            this.tableList[data.$index].quantity
          ).toFixed(2);
        } else {
          this.tableList[data.$index].sj = 0;
        }
      };
    },
    hkComputed() {
      return (data) => {
        if (this.tableList[data.$index].wsdj != "") {
          this.tableList[data.$index].hk = (
            this.tableList[data.$index].wsdj *
            this.tableList[data.$index].quantity
          ).toFixed(2);
        } else {
          this.tableList[data.$index].hk = 0;
        }
      };
    },
    hjComputed() {
      return (data) => {
        if (this.tableList[data.$index].hsdj != "") {
          this.tableList[data.$index].hj = (
            this.tableList[data.$index].hsdj *
            this.tableList[data.$index].quantity
          ).toFixed(2);
        } else {
          this.tableList[data.$index].hj = 0;
        }
      };
    },
  },
  data() {
    return {
      xsjhDableData: [],
      xsjhItem: [],
      xmjh: {
        page: 1,
        limit: 15,
        jhbh: "",
        jhmc: "",
        creator: "",
        beginDate: "",
        endDate: "",
        jhlx: "",
        jhjd: "",
        customerName: "",
      },
      filterText: "",
      brandData: [],
      defaultProps: {
        children: "children",
        label: "name",
      },
      dialogVisibleXsjh: false,
      dialogVisibleBrand: false,
      lxrdialogVisible:false,
      brandName: "",
      zdyName1: "",
      zdyName2: "",
      zdyName3: "",
      zdyName4: "",
      zdyName5: "",
      zdyName6: "",
      zdyName7: "",
      zdyName8: "",
      zdyName9: "",
      zdyName10: "",
      ylzdType1: "",
      ylzdType2: "",
      ylzdType3: "",
      ylzdType4: "",
      ylzdType5: "",
      ylzdType6: "",
      ylzdType7: "",
      ylzdType8: "",
      ylzdType9: "",
      ylzdType10: "",
      auditDialog: false,
      title: "",
      customersList: [],
      dialogCustomer: false,
      productList: [],
      options: [],
      props: {
        value: "name",
        label: "name",
        children: "children",
        multiple: true,
      },
      cascaderIds: [],
      tableData: [],
      customerList: [],
      quantityNum: 0,
      tableList: [
        {
          brandName: "",
          brandId: "",
          commnameId: "",
          commnameName: "",
          measureName: "",
          measureUnitid: "",
          quantity: "",
          productSl: "",
          wsdj: "",
          hsdj: "",
          sj: "",
          hk: "",
          hj: "",
          comname: "",
          productId: "",
          productModelnum: "",
          zy: "",
        },
      ],
      loading: false,
      creator: "",
      ywyName: "",
      dwttList: [],
      gdlxList: [{ name: "实单" }, { name: "重要单" }, { name: "机会单" }],
      from: {
        gdlx: "机会单",
        contactId: "",
        brandId: "",
        customerId: "",
        commnameId: "",
        zje: "",
        zkhZje: 0,
        bjdDh: "",
        cbzje: "",
        dwtt: "",
        zdzk: "100",
        fplx: 1,
        bjr: "",
        bjrq: "",
        bjyxq: "",
        hq: "",
        contactPhone: "",
        contactName: "",
        jhrq: "",
        pricelx: "",
        remark: "",
        fzbm: "",
        bzr: "",
        bjjd: "",
        gxr: "",
        xctx: "",
        sfbd: "否",
        xsjh: "",
        createDate: "",
      },
      xsjhDh: "",
      bjjdList: [
        { name: "初次报价" },
        { name: "17%" },
        { name: "二次议价" },
        { name: "执行中" },
        { name: "已结束" },
      ],
      typeofcontract: "",
      typeofcontactList: [],
      contactList: [],
      crmBjdHttklList: [],
      termsetting: {},
      fplxList: [
        {
          name: "增值税发票",
          id: 1,
        },
        {
          name: "普通发票",
          id: 2,
        },
        {
          name: "收据",
          id: 3,
        },
      ],
      brandName: "",
      customerName: "",
      customerId: "",
      dialogVisible: false,
      customerVisible: false,
      dialogFrom: {
        page: 1,
        limit: 15,
        name: "",
        code: "",
      },
      customerFrom: {
        page: 1,
        limit: 15,
        brandName: "",
        productModelnum: "",
        productName: "",
      },
      total: 0,
      selectionList: [],
      customerIndex: "",
      wsdjCheckbox: false,
      hsdjCheckbox: true,
      combinedList: [],
      message: "",
      fileList: [],
      dialogStatus: false,
      bmDialogStatus: false,
      treeId: "",
      bjrName: "",
      bmName: "",
      gxrName: "",
      gxrDialogStatus: false,
      ylzdList: [],
      flag: false,
      width: "",
      widthList: 0,
      dialogComname: false,
      tableIndex: 0,
    };
  },
  methods: {
    lxrDialog(id, name, phone) {
      this.from.contactName = name;
      this.contactName = name;
      this.from.contactPhone = phone;
      this.from.contactId = id;
    },
    hkDialog(name, id) {
      this.customerName = name;
      this.from.customerId = id;
      xbjQueryCustomerContact({
        customerId: id,
      })
        .then((res) => {
          this.contactList = res.data;
          this.from.contactName = res.data[0].contactName;
          this.from.contactPhone = res.data[0].contactPhone;
          this.from.contactId = res.data[0].contactId;
        })
        .catch((res) => {});
    },
    contactDialog() {
      if (this.from.contactId == "") {
        this.msgInfo("请选择客户");
        return;
      }
      this.lxrdialogVisible = true;
    },
    pmSubit(data) {
      console.log(data);
      this.$set(this.tableList[this.tableIndex], "comname", data.name);
      this.$set(this.tableList[this.tableIndex], "commnameId", data.id);
    },
    comnameIdClick(scope) {
      this.tableIndex = scope.$index;
      this.dialogComname = true;
    },
    xsjhQuery(dh, id) {
      this.from.xsjh = id;
      this.xsjhDh = dh;
    },
    zkhZjeHj() {
      let num = 0;
      for (var i in this.tableList) {
        num += Number(this.tableList[i].hsdj * this.tableList[i].quantity);
      }
      this.from.zkhZje = num * (this.from.zdzk / 100);
    },
    zdzkInput() {
      this.zkhZjeHj();
    },
    quantityInput() {
      this.zkhZjeHj();
    },
    hsdjInput() {
      this.zkhZjeHj();
    },
    xsjhClick() {
      this.dialogVisibleXsjh = true;
    },
    gxrDialogTreeData(val, data) {
      this.gxrName = data;
      this.from.gxr = val;
    },
    gxrDialog() {
      this.gxrDialogStatus = true;
      this.flag = true;
    },
    fzbmDialog() {
      this.bmDialogStatus = true;
    },
    bmDialogTreeData(val, data) {
      this.bmName = data;
      this.from.fzbm = val;
    },
    dialogTreeData(val, data) {
      this.bjrName = data;
      this.from.bjr = val;
    },
    bjrDialog() {
      this.dialogStatus = true;
      this.treeId = this.from.fzbm;
    },
    queryPhoneChage(val) {
      for (var i in this.contactList) {
        if (this.contactList[i].contactId == val) {
          this.from.contactPhone = this.contactList[i].contactPhone;
        }
      }
    },
    changeTree() {
      this.brandName = "";
      let data = this.$refs.tree.getCheckedNodes();
      let arr = [];
      for (var i in data) {
        this.brandName += "," + data[i].name;
        arr.push(data[i].id);
      }
      this.customerFrom.brandName = arr.join(",");
      this.dialogVisibleBrand = false;
    },
    filterNode(value, data) {
      if (!value) return true;
      return data.name.indexOf(value) !== -1;
    },
    handleCloseBrand() {
      this.dialogVisibleBrand = false;
      this.customerFrom.brandName = "";
      this.brandName = "";
    },
    brandIdClick() {
      this.dialogVisibleBrand = true;
    },
    deleteUpload(index) {
      this.fileList.splice(index, 1);
    },
    /** 图片选择出发 */
    xhUploadFile(event) {
      var files = event.target.files;
      if (files.length > 5) {
        this.msgInfo("最多支持上传5个文件");
        return;
      } else {
        if (files.length > 0) {
          var self = this;
          for (let index = 0; index < files.length; index++) {
            const file = files[index];
            this.sendFileRequest(file);
          }
        }
      }
    },
    sendFileRequest(file, result) {
      var params = { file: file };
      bjdFileUpload(params)
        .then((res) => {
          if (this.fileList.length > 4) {
            return;
          }
          this.fileList.push({
            name: res.name,
            fileId: res.fileId,
          });
        })
        .catch(() => {});
    },
    handleCloseAudit() {
      this.auditDialog = false;
    },
    auditDialogSubmit() {
      bjdCheckStatus({
        bjdId: this.bjdEditId,
        type: 2,
        message: this.message,
      })
        .then((res) => {
          this.msgSuccess("操作成功");
          this.hidenView();
        })
        .catch((res) => {});
    },
    customersIdClick(item) {
      this.customerName = item.name;
      this.from.customerId = item.customerId;
      this.contactList = item.contactList;
      this.from.contactId = item.contactList[0].contactId;
      this.dialogCustomer = false;
    },
    dwttChange(val) {
      let saleZzsl = 0;
      for (var i in this.dwttList) {
        if (this.dwttList[i].id == val) {
          saleZzsl = this.dwttList[i].saleZzsl;
        }
      }
      for (var i in this.tableList) {
        this.tableList[i].productSl = saleZzsl;
      }
    },
    wsdjHeader(h, { column }) {
      return h("div", [
        h("span", column.label),
        h("el-checkbox", {
          style: "display:inline-flex;margin-left:5px;",
          on: {
            change: ($event, column) => (
              (this.hsdjCheckbox = !$event), (this.wsdjCheckbox = $event)
            ), // 选中事件 $event, column，这里$event=true,column是input的dom当在select里打印的时候
          },
          props: {
            value: this.wsdjCheckbox, //文字框的内容取决于这个value，如果value不存在，会报错
          },
        }),
      ]);
    },
    hsdjHeader(h, { column }) {
      return h("div", [
        h("span", column.label),
        h("el-checkbox", {
          style: "display:inline-flex;margin-left:5px;",
          on: {
            change: ($event, column) => (
              (this.hsdjCheckbox = $event), (this.wsdjCheckbox = !$event)
            ), // 选中事件 $event, column，这里$event=true,column是input的dom当在select里打印的时候
          },
          props: {
            value: this.hsdjCheckbox, //文字框的内容取决于这个value，如果value不存在，会报错
          },
        }),
      ]);
    },
    successClick(status) {
      console.log(this.from);
      if (this.wsdjCheckbox && this.hsdjCheckbox) {
        this.msgInfo("请选择一个单价类型!");
        return;
      } else if (!this.wsdjCheckbox && !this.hsdjCheckbox) {
        this.msgInfo("请选择单价类型!");
        return;
      }
      if (this.from.customerId == "") {
        this.msgInfo("请选择客户!");
        return;
      }
      if (this.from.zdzk == "") {
        this.msgInfo("请输入整单折扣!");
        return;
      }
      let zjeNum = 0;
      for (var i in this.tableList) {
        if (this.tableList[i].brandId == "") {
          this.msgInfo("请选择品牌!");
          return;
        }
        if (this.tableList[i].quantity == "") {
          this.msgInfo("请输入数量!");
          return;
        }
        zjeNum += Number(this.tableList[i].hj);
      }
      this.from.zje = zjeNum;
      if (this.wsdjCheckbox) {
        this.from.pricelx = 1;
      } else if (this.hsdjCheckbox) {
        this.from.pricelx = 2;
      }
      for (var i in this.crmBjdHttklList) {
        this.crmBjdHttklList[i].px = Number(i) + 1;
      }
      let arr = [];
      for (var i in this.fileList) {
        arr.push(this.fileList[i].fileId);
      }
      this.from.fileIds = arr.join(",");
      this.from.status = status;
      this.from.typeofcontract = this.typeofcontract;
      this.from.crmBjdmxlList = this.tableList;
      this.from.crmBjdHttklList = this.crmBjdHttklList;
      for (var i in this.ylzdList) {
        let num = this.ylzdList[i].ylzdName.substring(
          this.ylzdList[i].ylzdName.indexOf("d") + 1,
          this.ylzdList[i].ylzdName.length
        );
        if (this.ylzdList[i].from == 1) {
          if (num == 1) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd1;
            }
          } else if (num == 2) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd2;
            }
          } else if (num == 3) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd3;
            }
          } else if (num == 4) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd4;
            }
          } else if (num == 5) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd5;
            }
          } else if (num == 6) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd6;
            }
          } else if (num == 7) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd7;
            }
          } else if (num == 8) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd8;
            }
          } else if (num == 9) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd9;
            }
          } else if (num == 10) {
            for (var k in this.tableList) {
              delete this.tableList[k].ylzd10;
            }
          }
        }
      }
      bjdAddOrUpdate({
        entity: this.from,
      })
        .then((res) => {
          if (res.bjdDh == undefined) {
            this.loading = true;
            this.$message({
              message: "修改成功",
              type: "success",
              onClose: () => {
                window.opener.postMessage("child", window.location);
                window.top.close();
                this.loading = false;
              },
            });
          } else {
            if (res.bjdDh !== this.from.bjdDh) {
              this.msgInfo("该单号已占用,已为你生成新单号" + res.bjdDh);
            } else {
              if (status == 0) {
                this.loading = true;
                this.$message({
                  message: "提交成功",
                  type: "success",
                  onClose: () => {
                    window.opener.postMessage("child", window.location);
                    window.top.close();
                    this.loading = false;
                  },
                });
              } else {
                this.loading = true;
                this.$message({
                  message: "修改成功",
                  type: "success",
                  onClose: () => {
                    window.opener.postMessage("child", window.location);
                    window.top.close();
                    this.loading = false;
                  },
                });
              }
            }
          }
        })
        .catch((res) => {});
    },
    resetGetList() {
      window.opener.postMessage("child", window.location);
    },
    hidenView() {
      window.top.close();
    },
    search() {
      this.dialogData();
    },
    customerSearch() {
      this.customerData();
    },
    customerReset() {
      this.customerFrom.page = 1;
      this.customerFrom.limit = 15;
      this.cascaderIds = [];
      this.customerFrom.brandName = "";
      this.customerFrom.productModelnum = "";
      this.customerFrom.productModelnum = "";
      this.customerData();
    },
    reset() {
      this.dialogFrom.page = 1;
      this.dialogFrom.limit = 15;
      this.dialogFrom.name = "";
      this.dialogFrom.code = "";
      this.dialogData();
    },
    queryName(data) {
      this.from.commnameId = data.commnameId;
      this.contactList = data.contactList;
      this.from.contactId = data.contactList[0].contactId;
      this.dialogVisible = false;
      this.customerName = data.name;
      this.from.customerId = data.customerId;
      // this.from.bjr = data.ywyId;
      this.customerId = data.customerId;
      this.from.contactName = data.contactName;
      this.from.contactPhone = data.contactList[0].contactPhone;
    },
    customerClick(data) {
      this.tableList[this.customerIndex].brandName = data.brandName;
      this.tableList[this.customerIndex].brandId = data.brandId;
      this.tableList[this.customerIndex].commnameId = data.commnameId;
      this.tableList[this.customerIndex].commnameName = data.comnameName;
      this.tableList[this.customerIndex].measureName = data.measureName;
      this.tableList[this.customerIndex].measureUnitid = data.measureUnitid;
      this.tableList[this.customerIndex].comname = data.productName;
      this.tableList[this.customerIndex].productId = data.productId;
      this.tableList[this.customerIndex].productModelnum = data.productModelnum;
    },
    productChange(val, id) {
      for (var i in this.productList) {
        if (this.productList[i].id == id) {
          val.gs = Number(this.productList[i].tariff.replace("%", ""));
        }
      }
    },
    handleCloseCustomer() {
      this.dialogCustomer = false;
    },
    handleClose() {
      this.dialogVisible = false;
    },
    handleCloseVisible() {
      this.customerVisible = false;
    },
    dialogData() {
      xbjQueryCustomer(this.dialogFrom)
        .then((res) => {
          this.tableData = res.data.list;
          this.total = res.data.totalRow;
        })
        .catch((res) => {});
    },
    dialog() {
      this.dialogVisible = true;
    },
    customerData() {
      xbjQueryProduct(this.customerFrom)
        .then((res) => {
          this.customerList = res.data.list;
        })
        .catch((res) => {});
    },
    customerCliuck(val) {
      this.customerIndex = val;
      this.customerVisible = true;
    },
    typeofcontactChange(val) {
      this.crmBjdHttklList = this.termsetting[val];
    },
    queryData() {
      let self = this;
      adminYszdGetYlzdSetByType({
        type: 1,
      })
        .then((res) => {
          this.ylzdList = res.data;
          for (var i in this.tableList) {
            for (var k in res.data) {
              this.$set(this.tableList[i], res.data[k].ylzdName, "");
            }
          }
          for (var i in res.data) {
            let num = res.data[i].ylzdName.substring(
              res.data[i].ylzdName.indexOf("d") + 1,
              res.data[i].ylzdName.length
            );
            if (num == "1") {
              this.zdyName1 = res.data[i].zdyName;
              this.ylzdType1 = res.data[i].from;
            } else if (num == "2") {
              this.zdyName2 = res.data[i].zdyName;
              this.ylzdType2 = res.data[i].from;
            } else if (num == "3") {
              this.zdyName3 = res.data[i].zdyName;
              this.ylzdType3 = res.data[i].from;
            } else if (num == "4") {
              this.zdyName4 = res.data[i].zdyName;
              this.ylzdType4 = res.data[i].from;
            } else if (num == "5") {
              this.zdyName5 = res.data[i].zdyName;
              this.ylzdType5 = res.data[i].from;
            } else if (num == "6") {
              this.zdyName6 = res.data[i].zdyName;
              this.ylzdType6 = res.data[i].from;
            } else if (num == "7") {
              this.zdyName7 = res.data[i].zdyName;
              this.ylzdType7 = res.data[i].from;
            } else if (num == "8") {
              this.zdyName8 = res.data[i].zdyName;
              this.ylzdType8 = res.data[i].from;
            } else if (num == "9") {
              this.zdyName9 = res.data[i].zdyName;
              this.ylzdType9 = res.data[i].from;
            } else if (num == "10") {
              this.zdyName10 = res.data[i].zdyName;
              this.ylzdType10 = res.data[i].from;
            }
          }
        })
        .catch((res) => {});
      xbjQueryComname()
        .then((res) => {
          this.productList = res.data;
        })
        .catch((res) => {});
      httkQueryTypeOfContact({ lx: 4 })
        .then((res) => {
          this.typeofcontactList = res.data;
          this.typeofcontract = res.data[0].id;
        })
        .catch((res) => {});
      if (this.widowData.type == "edit") {
        bjdFileQueryByBjdId({
          bjdId: this.widowData.id,
        })
          .then((res) => {
            this.fileList = res.data;
          })
          .catch((res) => {});
        bjdQueryForEdit({
          bjdId: this.widowData.id,
        })
          .then((res) => {
            this.wsdjCheckbox = false;
            this.hsdjCheckbox = true;
            this.tableList = res.data.djmxList;
            this.customerName = res.data.baseMsg[0].customerName;
            this.from.customerId = res.data.baseMsg[0].customerId;
            this.from.contactName = res.data.baseMsg[0].contactName
            this.from.bjdId = res.data.baseMsg[0].bjdId;
            this.from.bjdDh = res.data.baseMsg[0].bjdDh;
            this.from.hq = res.data.baseMsg[0].hq;
            this.from.remark = res.data.baseMsg[0].bjdRemark;
            this.from.gdlx = res.data.baseMsg[0].gdlx;
            this.from.createDate = res.data.baseMsg[0].createDate;
            this.termsetting = res.data.httkList;
            this.ywyName = res.data.baseMsg[0].creatorName;
            this.xsjhDh = res.data.baseMsg[0].jhbh;
            this.from.xsjh = res.data.baseMsg[0].xsjh;
            this.crmBjdHttklList = res.data.httkList[this.typeofcontract];
            this.from.contactPhone = res.data.baseMsg[0].contactPhone;
            this.bmName =
              res.data.baseMsg[0].fzbmName == ""
                ? ""
                : res.data.baseMsg[0].fzbmName
                    .map((res) => {
                      return res.name;
                    })
                    .join(",");
            this.from.fzbm = res.data.baseMsg[0].fzbm;
            this.bjrName = res.data.baseMsg[0].bjrName;
            this.from.bjr = res.data.baseMsg[0].bjr;
            this.from.jhrq = res.data.baseMsg[0].jhrq;
            this.from.sfbd = res.data.baseMsg[0].sfbd;
            this.from.bjjd = res.data.baseMsg[0].bjjd;
            this.from.zdzk = res.data.baseMsg[0].zdzk;
            this.from.hq = res.data.baseMsg[0].hq;
            this.from.xctx = res.data.baseMsg[0].xctx;
            this.gxrName =
              res.data.baseMsg[0].gxrName == ""
                ? ""
                : res.data.baseMsg[0].gxrName
                    .map((res) => {
                      return res.realname;
                    })
                    .join(",");
            this.from.gxr = res.data.baseMsg[0].gxr;
            this.zkhZjeHj();
            if (res.data.baseMsg[0].pricelx == 1) {
              this.wsdjCheckbox = true;
              this.hsdjCheckbox = false;
            } else {
              this.hsdjCheckbox = true;
              this.wsdjCheckbox = false;
            }
            xbjQueryCustomerContact({
              customerId: res.data.baseMsg[0].customerId,
            })
              .then((res) => {
                this.contactList = res.data;
                this.from.contactId = res.data[0].contactId;
              })
              .catch((res) => {});
          })
          .catch((res) => {});
      } else if (this.widowData.type == "xmjh") {
        console.log(this.widowData.id);
        this.bjrName = Lockr.get("loginUserInfo").realname;
        this.from.bjr = Lockr.get("loginUserInfo").userId;
        xsjhXsjhToBjd({
          xsjhId: this.widowData.id,
        })
          .then((res) => {
            this.from.contactPhone = res.data.contactPhone;
            this.xsjhDh = res.data.jhbh;
            this.from.xsjh = res.data.id;
            this.from.customerId = res.data.customerId;
            this.customerName = res.data.customerName;
            this.from.contactId = Number(res.data.contactId);
            xbjQueryCustomerContact({
              customerId: res.data.customerId,
            })
              .then((res) => {
                this.contactList = res.data;
              })
              .catch((res) => {});
          })
          .catch((res) => {});
        bjdQueryForAdd()
          .then((res) => {
            this.from.bjdDh = res.data.bjdDh;
            self.termsetting = res.data.termsetting;
            for (var i in self.termsetting) {
              for (var k in self.termsetting[i]) {
                self.termsetting[i][k].htzt = self.termsetting[i][k].tkzt;
                self.termsetting[i][k].htnr = self.termsetting[i][k].tknr;
                self.termsetting[i][k].typeofcontact =
                  self.termsetting[i][k].typeofcontact;
                delete self.termsetting[i][k].tkzt;
                delete self.termsetting[i][k].tknr;
                delete self.termsetting[i][k].typeofcontact;
              }
            }
            setTimeout(() => {
              this.crmBjdHttklList = res.data.termsetting[this.typeofcontract];
            }, 300);
          })
          .catch((res) => {});
      } else {
        this.bjrName = Lockr.get("loginUserInfo").realname;
        this.from.bjr = Lockr.get("loginUserInfo").userId;
        bjdQueryForAdd()
          .then((res) => {
            this.from.bjdDh = res.data.bjdDh;
            self.termsetting = res.data.termsetting;
            for (var i in self.termsetting) {
              for (var k in self.termsetting[i]) {
                self.termsetting[i][k].htzt = self.termsetting[i][k].tkzt;
                self.termsetting[i][k].htnr = self.termsetting[i][k].tknr;
                self.termsetting[i][k].typeofcontact =
                  self.termsetting[i][k].typeofcontact;
                delete self.termsetting[i][k].tkzt;
                delete self.termsetting[i][k].tknr;
                delete self.termsetting[i][k].typeofcontact;
              }
            }
            setTimeout(() => {
              this.crmBjdHttklList = res.data.termsetting[this.typeofcontract];
            }, 300);
          })
          .catch((res) => {});
      }
      bjdQueryDwtt()
        .then((res) => {
          this.dwttList = res.data;
          this.from.dwtt = res.data[0].id;
          for (var i in this.tableList) {
            this.$set(this.tableList[i], "productSl", res.data[0].saleZzsl);
          }
        })
        .catch((res) => {});
    },
    customerAdd() {
      for (var i in this.selectionList) {
        this.tableList[Number(i) + this.customerIndex] = Object.assign(
          {},
          this.selectionList[i]
        );
        this.$set(this.tableList, i, this.tableList[i]);
      }
    },
    handleSizeChange(val) {
      this.dialogFrom.limit = val;
      this.dialogData();
    },
    handleCurrentChange(val) {
      this.dialogFrom.page = val;
      this.dialogData();
    },
    handleSizeChangeA(val) {
      this.customerFrom.limit = val;
      this.customerData();
    },
    handleCurrentChangeA(val) {
      this.customerFrom.page = val;
      this.customerData();
    },
    handleSelectionChange(val) {
      this.selectionList = val;
    },
    deletClick(val) {
      this.tableList.splice(val, 1);
    },
    appendClick() {
      this.tableList.push({
        brandName: "",
        brandId: "",
        comnameId: "",
        commnameName: "",
        quantity: "",
        comname: "",
        productId: "",
        productModelnum: "",
        productSl: "",
        wsdj: "",
        hsdj: "",
        sj: "",
        hk: "",
        hj: "",
      });
    },
    deleteHttk(index) {
      this.crmBjdHttklList.splice(index, 1);
    },
    typeofcontactClick() {
      this.crmBjdHttklList.push({
        tkzt: "",
        tknr: "",
        id: "",
      });
    },
  },

  created() {},

  mounted() {
    setTimeout(() => {
      this.width = 100 / $(".el-table__row")[0].cells.length + "%";
      this.widthList = $(".el-table__row")[0].cells.length;
    }, 300);
    this.widowData = this.$route.query;
    this.widowData.id = this.decode(this.$route.query.id);
    this.creator = Lockr.get("loginUserInfo").realname;
    this.from.createDate = this.getTime();
    this.queryData();
    if (this.bjdEditFlag) {
      this.title = "报价单详情";
    } else {
      this.title = "编辑报价单";
    }
    this.from.bjrq =
      new Date().getFullYear() +
      "-" +
      (new Date().getMonth() + 1) +
      "-" +
      new Date().getDate();
    this.from.bjyxq =
      new Date().getFullYear() +
      "-" +
      (new Date().getMonth() + 1) +
      "-" +
      new Date().getDate();
  },
};
</script>
<style lang='scss'>
.create-flex .el-input__inner {
  padding-right: 0;
}
</style>
<style lang='scss' scoped>
@import "../../manage/styles/table.scss";
@import "../../../styles/detail.scss";

.tableButton {
  width: 100%;
  height: 40px;
  li {
    float: left;
    height: 40px;
    line-height: 40px;
    text-align: center;
  }
}
.a-upload {
  padding: 0 10px;
  margin-top: 5px;
  height: 25px;
  line-height: 25px;
  position: relative;
  cursor: pointer;
  color: #888;
  background: #fafafa;
  border: 1px solid #ddd;
  border-radius: 4px;
  overflow: hidden;
  *display: inline;
  *zoom: 1;
  float: left;
}

.a-upload input {
  position: absolute;
  font-size: 100px;
  right: 0;
  top: 0;
  opacity: 0;
  filter: alpha(opacity=0);
  cursor: pointer;
}

.a-upload:hover {
  color: #444;
  background: #eee;
  border-color: #ccc;
  text-decoration: none;
}
.uploadStyle {
  width: 60%;
  float: left;
  line-height: 40px;
  li {
    min-width: 100px;
    float: left;
    margin: 0 5px;
  }
}
.el-icon-close {
  color: red;
  cursor: pointer;
}
</style>