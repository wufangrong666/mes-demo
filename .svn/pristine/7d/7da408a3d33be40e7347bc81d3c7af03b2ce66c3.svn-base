<template>
  <div style="position: relative">
    
      <div class="c-container">
        <!-- 标题查询 -->
        <div class="title">公司账户设置</div>
        <!-- 新增更多 -->
        <div class="right-container">
          <el-button @click="createClick" type="primary">新增账户</el-button>
        </div>
      </div>


    <div xs-empty-icon="nopermission" xs-empty-text="暂无权限" class="container">
      <div>
        <flexbox class="th-container">
          <div class="selected—title">
            已选中
            <span class="selected—count">{{selectionList.length}}</span>项
          </div>
          <flexbox class="selection-items-box">
            <flexbox
              class="selection-item"
              v-for="(item, index) in getSelectionHandleItemsInfo()"
              :key="index"
            >
              <img class="selection-item-icon" :src="item.icon" />
              <el-button
                @click.native="selectionBarClick(item.type)"
                :disabled="item.disabled"
                type="text"
              >{{item.name}}</el-button>
            </flexbox>
          </flexbox>
        </flexbox>
      </div>
      <el-table
        class="n-table--border"
        id="table"
        v-loading="loading"
        :data="list"
        :height="tableHeight"
        stripe
        border
        highlight-current-row
        style="width: 100%"
        :cell-style="cellStyle"
        @header-dragend="handleHeaderDragend"
        @selection-change="handleSelectionChange"
      >
        <el-table-column show-overflow-tooltip type="selection" align="center" width="55"></el-table-column>
        <el-table-column
          show-overflow-tooltip
          prop="accountName"
          label="账户名称"
          width="140"
        ></el-table-column>
        <el-table-column
          show-overflow-tooltip
          prop="sort"
          label="排序"
          width="140"
        ></el-table-column>
      </el-table>
      <div class="p-contianer">
        <el-pagination
          class="p-bar"
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          :current-page="currentPage"
          :page-sizes="pageSizes"
          :page-size.sync="pageSize"
          layout="total, sizes, prev, pager, next, jumper"
          :total="total"
        ></el-pagination>
      </div>
    </div>
  </div>
</template>

<script>
import Lockr from 'lockr'
import draggable from "vuedraggable";

import {
  gszhglQueryPageList,
  gszhglDeleteById,
  gszhglQueryById
} from "@/api/finance/finance";

export default {
  name: "",
  components: {
    draggable,
  },
  data() {
    return {
      title: "",
      loading: false,
      list: [],
      total: 0,
      tableHeight: document.documentElement.clientHeight - 245, // 表的高度
      currentPage: 1,//当前页
      pageSize: Lockr.get('companyPageSizes') || 15,//每页条数
      pageSizes: [15, 30, 60, 100],//切换每页显示
      search: '', // 搜索内容

      /** 勾选行 */
      selectionList: [], // 勾选数据
    };
  },

  methods: {
    receiveMessage(event) {
      if (event.data == 'child') {
        this.getList()
      } else if (event.data == 'pm') {
        this.loginDataPm()
      }
    },
    /** 通过回调控制style */
    cellStyle({ row, column, rowIndex, columnIndex }) {
      if (column.property === "fabh") {
        return { color: "#3E84E9", cursor: "pointer" };
      } else {
        return "";
      }
    },
    createClick() {
        this.windowOpen("/gszhglAddEdit", {
          id: this.encode(""),
          type: "add",
        });
    },
    /** 获取展示items */
    getSelectionHandleItemsInfo() {
      let handleInfos = {
        delete: {
          name: "删除",
          type: "delete",
          icon: require("@/assets/img/selection_delete.png"),
          disabled: true,
        },
        
        edit: {
          name: "编辑",
          type: "edit",
          icon: require("@/assets/img/selection_edit.png"),
          disabled: true,
        },
      };
      if (this.selectionList.length == 1) {
        handleInfos.delete.disabled = false;
        handleInfos.edit.disabled = false;
      }
      return handleInfos;
    },
    //操作按钮
    selectionBarClick(type) {
      if (type == "edit") {
        //编辑
        this.windowOpen("/gszhglAddEdit", {
          id: this.encode(this.selectionList[0].accountId),
          type: "edit",
        });
        
      } else if (type == 'delete') {
        //删除
        var message =  "确定要删除这些数据吗?";
        this.$confirm(message, "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning",
        })
          .then(() => {
            var ids = this.selectionList.map(function (item, index, array) {
              return item.accountId;
            });
            gszhglDeleteById({
              id: ids.join(","),
            })
              .then((res) => {
                this.msgSuccess("删除成功");
                this.getList()
              })
              .catch(() => {});
            })
            .catch(() => {
              this.msgInfo("已取消操作");
            });
      }

    },
    /** 获取列表数据 */
    getList() {
      this.loading = true
      var params = {
        page: this.currentPage,
        limit: this.pageSize,
        search: this.search,
      }

      gszhglQueryPageList(params)
        .then(res => {
          this.list = res.data.list
          this.total = res.data.totalRow
          this.loading = false
        })
        .catch(() => {
          this.loading = false
        })
    },
    /** 勾选操作 */
    handleSelectionChange(val) {
      this.selectionList = val // 勾选的行
      //this.$refs.tableHead.headSelectionChange(val)
    },
    // 当拖动表头改变了列的宽度的时候会触发该事件
    handleHeaderDragend(newWidth, oldWidth, column, event) {
        return {
          field: column.property,
          width: newWidth
        }
      
    },
    // 更改每页展示数量
    handleSizeChange(val) {
      Lockr.set('companyPageSizes', val)
      this.pageSize = val
      this.getList()
    },
    // 更改当前页数
    handleCurrentChange(val) {
      this.currentPage = val
      this.getList()
    },
    /**
     * 更新表高
     */
    updateTableHeight() {
      var offsetHei = document.documentElement.clientHeight
      var removeHeight = Object.keys(this.filterObj).length > 0 ? 310 : 240
      this.tableHeight = offsetHei - removeHeight
    }
    
  },
  created() {},

  mounted() {
    this.title = this.$route.meta.title;
    this.getList();
    document.getElementById('table').addEventListener('click', e => {
      e.stopPropagation()
    })
    window.addEventListener("message", this.receiveMessage, false)
  },
};
</script>
<style lang='scss' scoped>
@import "@/views/manage/styles/table.scss";
.c-container {
  height: 60px;
  position: relative;
  z-index: 100;
  .title {
    float: left;
    padding: 0 20px;
    font-size: 18px;
    line-height: 60px;
  }

  .right-container {
    margin-right: -10px;
    float: right;
    margin: 12px 20px 0 0;
    position: relative;
  }
}
.th-container {
  font-size: 13px;
  height: 50px;
  padding: 0 20px;
}
/** 场景和筛选 */
.condition_title {
  width: 55px;
  cursor: pointer;
}
.condition_title:hover {
  color: $xr-color-primary;
}

.m-arrow {
  margin: 0 8px;
}
.c-filtrate {
  margin: 0 10px 0 30px;
  width: 12px;
}

/** 勾选操作 */
.th-container {
  font-size: 12px;
  height: 50px;
  padding: 0 20px;
  color: #777;

  .selected—title {
    flex-shrink: 0;
    padding-right: 20px;
    border-right: 1px solid $--table-border-color;
    .selected—count {
      color: $xr-color-primary;
    }
  }
}

.selection-items-box {
  overflow-x: auto;
  overflow-y: hidden;
  .selection-item {
    width: auto;
    padding: 15px;
    flex-shrink: 0;
    .selection-item-icon {
      display: block;
      margin-right: 5px;
      width: 15px;
      height: 15px;
    }
    .selection-item-name {
      cursor: pointer;
      color: #777;
    }
    .selection-item-name:hover {
      color: $xr-color-primary;
    }
  }
}
</style>